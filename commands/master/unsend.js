module.exports = {
  name: 'unsend',
  execute: async (api, threadID, args, event, botState, isMaster, botID, stopBot) => {
    if (!isMaster) {
      api.sendMessage('üö´ ‡§Ø‡•á ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§∏‡§ø‡§∞‡•ç‡§´ ‡§Æ‡§æ‡§∏‡•ç‡§ü‡§∞ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§π‡•à! üïâÔ∏è', threadID);
      return;
    }

    const userId = Object.keys(botState.sessions).find(id => botState.sessions[id].api === api);
    if (botState.sessions[userId]?.safeMode) {
      console.log(`[SAFE] Skipping unsend in SAFE MODE for thread ${threadID}`);
      api.sendMessage('‚ö†Ô∏è SAFE MODE ‡§Æ‡•á‡§Ç ‡§π‡•à, ‡§Æ‡•à‡§∏‡•á‡§ú ‡§°‡§ø‡§≤‡•Ä‡§ü ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ‡•§ ‡§ï‡•Å‡§ï‡•Ä‡§ú ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§∞‡•ã! üïâÔ∏è', threadID);
      return;
    }

    const tryDeleteMessage = (messageID, attempt = 1, maxAttempts = 2) => {
      api.deleteMessage(messageID, (err) => {
        if (err && attempt < maxAttempts) {
          console.error(`[ERROR] Unsend attempt ${attempt} failed for messageID=${messageID}: ${err.message}`);
          setTimeout(() => tryDeleteMessage(messageID, attempt + 1, maxAttempts), 2000);
          return;
        }
        if (err) {
          console.error(`[ERROR] Failed to unsend messageID=${messageID}: ${err.message}`);
          api.sendMessage('‚ùå ‡§Æ‡•à‡§∏‡•á‡§ú ‡§°‡§ø‡§≤‡•Ä‡§ü ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§ó‡§≤‡§§‡•Ä ‡§π‡•Å‡§à‡•§', threadID);
          return;
        }
        console.log(`[DEBUG] Successfully unsent messageID=${messageID} in thread ${threadID}`);
        api.sendMessage('‚úÖ ‡§Æ‡•à‡§∏‡•á‡§ú ‡§°‡§ø‡§≤‡•Ä‡§ü ‡§ï‡§∞ ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ! üïâÔ∏è', threadID);
      });
    };

    if (event.messageReply && event.messageReply.messageID) {
      const replyMessageID = event.messageReply.messageID;
      console.log(`[DEBUG] Unsend requested for replied messageID=${replyMessageID}, threadID=${threadID}`);
      tryDeleteMessage(replyMessageID);
    } else {
      api.getThreadHistory(threadID, 2, null, (err, history) => {
        if (err || !history || history.length < 2) {
          console.error(`[ERROR] Failed to fetch thread history for unsend: ${err?.message || 'No history'}`);
          api.sendMessage('‚ùå ‡§≤‡§æ‡§∏‡•ç‡§ü ‡§Æ‡•à‡§∏‡•á‡§ú ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ‡•§', threadID);
          return;
        }
        const lastBotMessage = history.find(msg => msg.senderID === botID && msg.messageID !== event.messageID);
        if (lastBotMessage) {
          console.log(`[DEBUG] Unsend requested for last bot messageID=${lastBotMessage.messageID}, threadID=${threadID}`);
          tryDeleteMessage(lastBotMessage.messageID);
        } else {
          console.error(`[ERROR] No bot message found in history for unsend, threadID=${threadID}`);
          api.sendMessage('‚ùå ‡§ï‡•ã‡§à ‡§°‡§ø‡§≤‡•Ä‡§ü ‡§ï‡§∞‡§®‡•á ‡§≤‡§æ‡§Ø‡§ï ‡§Æ‡•à‡§∏‡•á‡§ú ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ‡•§', threadID);
        }
      });
    }
  }
};
