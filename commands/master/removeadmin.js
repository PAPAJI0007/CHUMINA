const fs = require('fs');
const { LEARNED_RESPONSES_PATH } = require('../../config/constants');

module.exports = {
  name: "removeadmin",
  execute(api, threadID, args, event, botState, isMaster) {
    // рдорд╛рд╕реНрдЯрд░ рдЪреЗрдХ
    if (!isMaster) {
      api.sendMessage('ЁЯЪл рдХреЗрд╡рд▓ рдорд╛рд╕реНрдЯрд░ (Shalender Hindu Ji) рдЗрд╕ рдХрдорд╛рдВрдб рдХреЛ рдпреВрдЬ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред', threadID);
      return;
    }

    try {
      // рдпреВрдЬрд░ ID рдирд┐рдХрд╛рд▓рдирд╛
      let targetID = args[1]?.trim();
      if (event.mentions && Object.keys(event.mentions).length > 0) {
        targetID = Object.keys(event.mentions)[0];
      }

      // UID рдпрд╛ рдореЗрдВрд╢рди рдХрд╛ рд╡реИрд▓рд┐рдбреЗрд╢рди
      if (!targetID || isNaN(targetID)) {
        api.sendMessage(`Usage: ${botState.sessions[event.threadID]?.prefix || '#'}removeadmin <@user/uid>`, threadID);
        return;
      }

      // рдорд╛рд╕реНрдЯрд░ рдХреЛ рд╣рдЯрд╛рдиреЗ рд╕реЗ рд░реЛрдХрдирд╛
      if (targetID === MASTER_ID) {
        api.sendMessage('тЭМ Shalender Hindu Ji рдХреЛ рдПрдбрдорд┐рди рд▓рд┐рд╕реНрдЯ рд╕реЗ рдирд╣реАрдВ рд╣рдЯрд╛рдпрд╛ рдЬрд╛ рд╕рдХрддрд╛!', threadID);
        return;
      }

      // рдПрдбрдорд┐рди рд▓рд┐рд╕реНрдЯ рдореЗрдВ рдпреВрдЬрд░ рдХреА рдЬрд╛рдБрдЪ
      if (!botState.adminList.includes(targetID)) {
        api.sendMessage(`тЭМ рдпреВрдЬрд░ ${targetID} рдПрдбрдорд┐рди рдирд╣реАрдВ рд╣реИ!`, threadID);
        return;
      }

      // рдпреВрдЬрд░ рдХреА рдЬрд╛рдирдХрд╛рд░реА рд▓реЗрдирд╛
      api.getUserInfo(targetID, (err, ret) => {
        if (err || !ret?.[targetID]) {
          console.error(`Removeadmin user info error for UID ${targetID}:`, err?.message || err);
          api.sendMessage('тЭМ рдпреВрдЬрд░ рдХреА рдЬрд╛рдирдХрд╛рд░реА рд▓реЗрдиреЗ рдореЗрдВ рдЕрд╕рдлрд▓ред рдХреГрдкрдпрд╛ рдлрд┐рд░ рд╕реЗ рдХреЛрд╢рд┐рд╢ рдХрд░реЗрдВред', threadID);
          return;
        }

        const name = ret[targetID].name || 'User';

        // рдПрдбрдорд┐рди рд▓рд┐рд╕реНрдЯ рд╕реЗ рдпреВрдЬрд░ рд╣рдЯрд╛рдирд╛
        botState.adminList = botState.adminList.filter(id => id !== targetID);

        // learned_responses.json рдЕрдкрдбреЗрдЯ рдХрд░рдирд╛
        let learnedResponses = { triggers: [], adminList: botState.adminList };
        try {
          if (fs.existsSync(LEARNED_RESPONSES_PATH)) {
            learnedResponses = JSON.parse(fs.readFileSync(LEARNED_RESPONSES_PATH, 'utf8'));
            learnedResponses.adminList = botState.adminList;
          }
          fs.writeFileSync(LEARNED_RESPONSES_PATH, JSON.stringify(learnedResponses, null, 2));
          api.sendMessage(`тЬЕ ${name} (${targetID}) рдХреЛ Shalender Hindu Ji рдиреЗ рдПрдбрдорд┐рди рд▓рд┐рд╕реНрдЯ рд╕реЗ рд╣рдЯрд╛ рджрд┐рдпрд╛!`, threadID);
        } catch (fileErr) {
          console.error(`Removeadmin file write error for UID ${targetID}:`, fileErr.message);
          api.sendMessage('тЭМ рдлрд╛рдЗрд▓ рдЕрдкрдбреЗрдЯ рдХрд░рдиреЗ рдореЗрдВ рдЧрд▓рддреАред рдХреГрдкрдпрд╛ рдлрд┐рд░ рд╕реЗ рдХреЛрд╢рд┐рд╢ рдХрд░реЗрдВред', threadID);
        }
      });
    } catch (e) {
      console.error(`Removeadmin general error for thread ${threadID}:`, e.message);
      api.sendMessage('тЭМ removeadmin рдХрдорд╛рдВрдб рдореЗрдВ рддреНрд░реБрдЯрд┐ред рдХреГрдкрдпрд╛ рдлрд┐рд░ рд╕реЗ рдХреЛрд╢рд┐рд╢ рдХрд░реЗрдВ рдпрд╛ рдбреЗрд╡рд▓рдкрд░ рд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВред', threadID);
    }
  }
};
