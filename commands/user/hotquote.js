module.exports = {
  name: 'hotquote',
  description: 'Generate a random adult-funny quote with stylish touches ЁЯШОЁЯФе',
  aliases: ['hotquote'],
  execute: async (api, threadID, args, event, botState, isMaster, botID, stopBot) => {
    console.log(`[DEBUG] hotquote called: threadID=${threadID}, args=${JSON.stringify(args)}, senderID=${event.senderID}`);
    try {
      let targetID = event.senderID;
      let name = null;

      // Check for mentions
      if (event.mentions && Object.keys(event.mentions).length > 0) {
        targetID = Object.keys(event.mentions)[0];
        name = event.mentions[targetID];
        console.log(`[DEBUG] Using mention ID: ${targetID}, name: ${name}`);
      } else if (args[0] && args[0].startsWith('https://www.facebook.com/')) {
        const profileUrl = args[0];
        const userIDMatch = profileUrl.match(/(\d+)/);
        if (!userIDMatch) {
          console.log('[DEBUG] Invalid profile URL provided');
          return api.sendMessage('ЁЯЪл рдЧрд▓рдд рдкреНрд░реЛрдлрд╛рдЗрд▓ рд▓рд┐рдВрдХ! @mention рдпрд╛ рд╕рд╣реА FB рдкреНрд░реЛрдлрд╛рдЗрд▓ рд▓рд┐рдВрдХ рдпреВрдЬ рдХрд░реЛред ЁЯХЙя╕П', threadID);
        }
        targetID = userIDMatch[0];
        console.log(`[DEBUG] Using profile URL ID: ${targetID}`);
      } else if (event.messageReply && event.messageReply.senderID) {
        targetID = event.messageReply.senderID;
        console.log(`[DEBUG] Using reply sender ID: ${targetID}`);
      }
      console.log(`[DEBUG] Target ID: ${targetID}`);

      if (!name) {
        try {
          console.log(`[DEBUG] Fetching user info for ID: ${targetID}`);
          const userInfo = await new Promise((resolve, reject) => {
            api.getUserInfo(targetID, (err, ret) => {
              if (err || !ret || !ret[targetID]) {
                console.error(`[ERROR] Failed to fetch user info: ${err?.message || 'Unknown error'}`);
                reject(new Error('рдпреВрдЬрд░ рдЬрд╛рдирдХрд╛рд░реА рд▓рд╛рдиреЗ рдореЗрдВ рдЕрд╕рдлрд▓ред'));
              } else {
                resolve(ret[targetID]);
              }
            });
          });
          name = userInfo.name || 'Unknown User';
        } catch (err) {
          console.error(`[ERROR] User info error: ${err.message}`);
          return api.sendMessage(`тЪая╕П рдпреВрдЬрд░ рдЬрд╛рдирдХрд╛рд░реА рд▓рд╛рдиреЗ рдореЗрдВ рдЧрд▓рддреА: ${err.message} ЁЯХЙя╕П`, threadID);
        }
      }
      console.log(`[DEBUG] User name: ${name}`);

      // Unicode mapping for Shalender check
      const unicodeMap = {
        'ЁЯЖВ': 'S', 'ЁЯЕ╖': 'H', 'ЁЯЕ░': 'A', 'ЁЯЕ╗': 'L', 'ЁЯЕ┤': 'E', 'ЁЯЕ╜': 'N', 'ЁЯЕ│': 'D', 'ЁЯЖБ': 'R',
        'я╝│': 'S', 'я╝и': 'H', 'я╝б': 'A', 'я╝м': 'L', 'я╝е': 'E', 'я╝о': 'N', 'я╝д': 'D', 'я╝▓': 'R',
        'тЖм': '', 'тЮЭ': '', 'тд╣': '', 'тд╛': '', 'ЁЯй╖': '', 'ЁЯй╡': '', 'ЁЯй╢': '', 'ЁЯдН': '', 'ЁЯзб': '', 'ЁЯдО': '', 'ЁЯТЪ': '', 'ЁЯТЬ': '', 'ЁЯк╜': '', 'ЁЯМЯ': ''
      };
      let normalizedName = name.normalize('NFKD').replace(/[\u0300-\u036f]/g, '');
      Object.keys(unicodeMap).forEach(fancy => {
        normalizedName = normalizedName.replace(new RegExp(fancy, 'g'), unicodeMap[fancy]);
      });
      normalizedName = normalizedName.toLowerCase().replace(/[^a-z]/g, '');
      console.log(`[DEBUG] Normalized name: ${normalizedName}`);

      // Check for Shalender or Master ID
      const isShalender = /shalender|shailendra|salender|shalendra/i.test(normalizedName);
      const isMasterID = targetID === '100023807453349';
      let message;
      let mentions = [];

      if (isShalender || isMasterID) {
        console.log(`[DEBUG] Shalender or Master ID detected: ${name}, ${targetID}`);
        console.log(`[DEBUG] Shalender unique quote selected`);
        message = `тШЖтЬ╝тШЕтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтШЕтЬ╝тШЖ\n` +
                  `тШЮя╕О @${name} рдЬреА рдХрд╛ рд╣реЙрдЯ рдХреЛрдЯ\n` +
                  `рдХреЛрдЯ: KING KING HOTA H, YE ASLI KING H! ЁЯССЁЯФе\n` +
                  `рд╡рд┐рд╢реЗрд╖ рдЯрд┐рдкреНрдкрдгреА: рдпреЗ рджрд╛рдирд╡реАрд░ рдкрд░рдорд╡реАрд░ рд╢реВрд░рд╡реАрд░ рд╣реИ рдпреЗ рдорд╣рд╛рдкреБрд░реБрд╖ рд╣реИ ЁЯШО\n` +
                  `тШЖтЬ╝тШЕтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтШЕтЬ╝тШЖ`;
        mentions = [{
          tag: `@${name}`,
          id: targetID,
          fromIndex: message.indexOf(`@${name}`)
        }];
      } else {
        const quotes = [
          'рдкреНрдпрд╛рд░ рдЕрдВрдзрд╛ рд╣реЛрддрд╛ рд╣реИ, рдкрд░ рд╡рд╛рд╕рдирд╛ 4K рдореЗрдВ рджреЗрдЦрддреА рд╣реИ! ЁЯШШ',
          'рджрд┐рд▓ рддреЛ рдмрдЪреНрдЪрд╛ рд╣реИ, рдкрд░ рдореВрдб рдЬреЛрд╣рдиреА рд╕рд┐рдВрд╕ рд╡рд╛рд▓рд╛! ЁЯШО',
          'рдкреНрдпрд╛рд░ рдореЗрдВ рдзреЛрдЦрд╛ рдЦрд╛рдпрд╛, рдЕрдм Tinder рдкреЗ рдорд╛рдпрд╛! ЁЯШВ',
          'рдЬрд╝рд┐рдВрджрдЧреА рдЫреЛрдЯреА рд╣реИ, рд░рд╛рддреЗрдВ рд▓рдВрдмреА рдХрд░! ЁЯФе',
          'рджрд┐рд▓ рд╕реЗ рджрд┐рд▓ рддрдХ, рдмрд╕ 18+ рдХрд╛ рдЦреНрдпрд╛рд▓! ЁЯШЬ',
          'рдкреНрдпрд╛рд░ рдХрд╛ рддреАрд░ рдЪрд▓рд╛, рдкрд░ рдЯрд╛рд░рдЧреЗрдЯ 18+! ЁЯШП',
          'рднрд╛рдИ рдХрд╛ рд╕реНрдЯрд╛рдЗрд▓, Tinder рдХрд╛ рдЬрд▓рд╡рд╛! ЁЯШО',
          'рджрд┐рд▓ рдзрдбрд╝рдХрддрд╛ рд╣реИ, рдкрд░ рдореВрдб рддреЛ рд╕реИрд╡реЗрдЬ рд╣реИ! ЁЯШИ',
          'рдкреНрдпрд╛рд░ рдореЗрдВ рдкрдбрд╝реЗ, рддреЛ рд░рд╛рддреЗрдВ рдЬрд╛рдЧреЗ! ЁЯФе',
          'рдЬрд╝рд┐рдВрджрдЧреА рд╣реИ, рддреЛ рдереЛрдбрд╝рд╛ рдордЬрд╝рд╛ рд▓реЗ! ЁЯШШ',
          'рджрд┐рд▓ рдХрд╛ рдХрдиреЗрдХреНрд╢рди, WiFi рд╕реЗ рддреЗрдЬрд╝! ЁЯШП',
          'рдкреНрдпрд╛рд░ рдХрд╛ рдмреБрдЦрд╛рд░, рд░рд╛рдд рдореЗрдВ рдЪрдврд╝рддрд╛ рд╣реИ! ЁЯФе',
          'рднрд╛рдИ рдХрд╛ рд▓реБрдХ, 18+ рдХреЛ рдЯрдХреНрдХрд░! ЁЯШО',
          'рджрд┐рд▓ рддреЛрдбрд╝рдиреЗ рд╡рд╛рд▓реЗ, Tinder рдкреЗ рдорд┐рд▓реЗрдВрдЧреЗ! ЁЯШВ',
          'рдкреНрдпрд╛рд░ рдХрд╛ рдЧрд╛рдирд╛, рд░рд╛рдд рдореЗрдВ рдмрдЬрд╛рдирд╛! ЁЯШЬ',
          'рдЬрд╝рд┐рдВрджрдЧреА рд╣реИ рдЫреЛрдЯреА, рд░рд╛рддреЗрдВ рдХрд░реЛ рдореЛрдЯреА! ЁЯШИ',
          'рджрд┐рд▓ рдХреА рдзрдбрд╝рдХрди, рд╕реИрд╡реЗрдЬ рдХрд╛ рдлреИрди! ЁЯШШ',
          'рдкреНрдпрд╛рд░ рдХрд╛ рдбреЛрдЬрд╝, рд░рд╛рдд рдореЗрдВ рд▓реЗ рд▓реЛ! ЁЯФе',
          'рднрд╛рдИ рдХрд╛ рд╕реНрд╡реИрдЧ, 18+ рдХрд╛ рдмреИрдЧ! ЁЯШО',
          'рджрд┐рд▓ рдХрд╛ рд░рд╛рд╕реНрддрд╛, 18+ рдХрд╛ рдЯреНрд╡рд┐рд╕реНрдЯ! ЁЯШП',
          'рдкреНрдпрд╛рд░ рдореЗрдВ рдЧрд┐рд░реЗ, рддреЛ рд░рд╛рдд рдореЗрдВ рдЙрдбрд╝реЗ! ЁЯШЬ',
          'рдЬрд╝рд┐рдВрджрдЧреА рдХрд╛ рдордЬрд╝рд╛, рд░рд╛рдд рдореЗрдВ рдЖрддрд╛ рд╣реИ! ЁЯФе',
          'рджрд┐рд▓ рдХрд╛ рдЗрдВрдЬрди, рдлреБрд▓ рд╕реНрдкреАрдб рдореЗрдВ! ЁЯШИ',
          'рдкреНрдпрд╛рд░ рдХрд╛ рдЦреЗрд▓, рд░рд╛рдд рдореЗрдВ рдЦреЗрд▓! ЁЯШШ',
          'рднрд╛рдИ рдХрд╛ рд▓реБрдХ, рд╕реИрд╡реЗрдЬ рд╣реБрдХ! ЁЯШО',
          'рджрд┐рд▓ рдХреА рдмрд╛рдд, рд░рд╛рдд рдореЗрдВ рдЦреБрд▓рддреА рд╣реИ! ЁЯФе',
          'рдкреНрдпрд╛рд░ рдХрд╛ рдирд╢рд╛, рд░рд╛рдд рдореЗрдВ рдЪрдврд╝рддрд╛ рд╣реИ! ЁЯШП',
          'рдЬрд╝рд┐рдВрджрдЧреА рдХрд╛ рдордЬрд╝рд╛, 18+ рдХреЗ рд╕рд╛рде! ЁЯШЬ',
          'рджрд┐рд▓ рдХрд╛ рд╕реНрдЯреЗрдЯрд╕, 18+ рдлреБрд▓ рдореВрдб! ЁЯШИ',
          'рдкреНрдпрд╛рд░ рдХрд╛ рдЬрд╛рджреВ, рд░рд╛рдд рдореЗрдВ рдЪрд╛рд▓реВ! ЁЯФе',
          'рднрд╛рдИ рдХрд╛ рд╕реНрдЯрд╛рдЗрд▓, рд╕реИрд╡реЗрдЬ рд╕реНрдорд╛рдЗрд▓! ЁЯШО',
          'рджрд┐рд▓ рдХрд╛ рдХрдиреЗрдХреНрд╢рди, рд░рд╛рдд рдХрд╛ рд╕реЗрдХреНрд╢рди! ЁЯШШ',
          'рдкреНрдпрд╛рд░ рдХрд╛ рд░рд╛рд╕реНрддрд╛, рдереЛрдбрд╝рд╛ рдЯреЗрдврд╝рд╛ рд╣реИ! ЁЯШП',
          'рдЬрд╝рд┐рдВрджрдЧреА рдХрд╛ рд╕реНрд╡рд╛рдж, рд░рд╛рдд рдореЗрдВ рдЪрдЦреЛ! ЁЯФе',
          'рджрд┐рд▓ рдХреА рдзрдбрд╝рдХрди, рд╕реИрд╡реЗрдЬ рдореВрдб рдореЗрдВ! ЁЯШИ',
          'рдкреНрдпрд╛рд░ рдХрд╛ рдмрдЯрди, рд░рд╛рдд рдореЗрдВ рджрдмрд╛рдУ! ЁЯШЬ',
          'рднрд╛рдИ рдХрд╛ рдЬрд▓рд╡рд╛, 18+ рдХрд╛ рдмрд▓рд╡рд╛! ЁЯШО',
          'рджрд┐рд▓ рдХрд╛ рдбреНрд░рд╛рдорд╛, рд░рд╛рдд рдореЗрдВ рдкреВрд░рд╛! ЁЯФе',
          'рдкреНрдпрд╛рд░ рдХрд╛ рдордЬрд╝рд╛, 18+ рдореЗрдВ рдЖрддрд╛ рд╣реИ! ЁЯШШ',
          'рдЬрд╝рд┐рдВрджрдЧреА рдХрд╛ рдЦреЗрд▓, рд░рд╛рдд рдореЗрдВ рдЦреЗрд▓! ЁЯШП',
          'рджрд┐рд▓ рдХрд╛ рд╕реНрдЯреЗрдЯрд╕, рдлреБрд▓ рд╕реИрд╡реЗрдЬ! ЁЯШИ',
          'рдкреНрдпрд╛рд░ рдХрд╛ рддрдбрд╝рдХрд╛, рд░рд╛рдд рдореЗрдВ рд▓рдЧрд╛рдУ! ЁЯФе',
          'рднрд╛рдИ рдХрд╛ рдореВрдб, 18+ рдХрд╛ рдлреВрдб! ЁЯШО',
          'рджрд┐рд▓ рдХреА рдмрд╛рдд, рд░рд╛рдд рдореЗрдВ рдЪрдордХ! ЁЯШШ',
          'рдкреНрдпрд╛рд░ рдХрд╛ рддреВрдлрд╛рди, рд░рд╛рдд рдореЗрдВ рдЖрди! ЁЯШЬ',
          'рдЬрд╝рд┐рдВрджрдЧреА рдХрд╛ рд╕реНрд╡реИрдЧ, 18+ рдХрд╛ рдмреИрдЧ! ЁЯШИ',
          'рджрд┐рд▓ рдХрд╛ рдЗрд╢рд╛рд░рд╛, рд░рд╛рдд рдореЗрдВ рдирдЬрд╛рд░рд╛! ЁЯФе',
          'рдкреНрдпрд╛рд░ рдХрд╛ рдЬрд╛рджреВ, рд░рд╛рдд рдореЗрдВ рдмрд┐рдЦрд░реВ! ЁЯШП',
          'рднрд╛рдИ рдХрд╛ рд╕реНрдЯрд╛рдЗрд▓, рд╕реИрд╡реЗрдЬ рдЯрд╛рдЗрдк! ЁЯШО',
          'рджрд┐рд▓ рдХрд╛ рд░рд╛рд╕реНрддрд╛, рд░рд╛рдд рдХрд╛ рдЯреНрд╡рд┐рд╕реНрдЯ! ЁЯШШ',
          'рдкреНрдпрд╛рд░ рдХрд╛ рдордЬрд╝рд╛, рд░рд╛рдд рдореЗрдВ рддрд╛рдЬрд╝рд╛! ЁЯФе',
          'рдЬрд╝рд┐рдВрджрдЧреА рдХрд╛ рдирд╢рд╛, 18+ рдореЗрдВ рдмрдЬрд╛! ЁЯШЬ',
          'рджрд┐рд▓ рдХреА рдзрдбрд╝рдХрди, 18+ рдХрд╛ рдлреИрди! ЁЯШО',
          'рдкреНрдпрд╛рд░ рдХрд╛ рдЦреЗрд▓, рд░рд╛рдд рдореЗрдВ рддреЗрдЬрд╝! ЁЯШИ',
          'рднрд╛рдИ рдХрд╛ рдЬрд▓рд╡рд╛, рд░рд╛рдд рдореЗрдВ рдмрд▓рд╡рд╛! ЁЯФе',
          'рджрд┐рд▓ рдХрд╛ рдордЬрд╝рд╛, 18+ рдХрд╛ рд░рд╛рдЬрд╝! ЁЯШШ',
          'рдкреНрдпрд╛рд░ рдХрд╛ рд╕реНрдЯреЗрдЯрд╕, рд░рд╛рдд рдореЗрдВ рдПрдХреНрд╕рдкреНрд░реЗрд╕! ЁЯШП',
          'рдЬрд╝рд┐рдВрджрдЧреА рдХрд╛ рддрдбрд╝рдХрд╛, рд░рд╛рдд рдореЗрдВ рдЪрдордХрд╛! ЁЯФе',
          'рджрд┐рд▓ рдХрд╛ рдХрдиреЗрдХреНрд╢рди, рд╕реИрд╡реЗрдЬ рд╕реЗрдХреНрд╢рди! ЁЯШО'
        ];
        const decorativeLines = ['тЬи===тЬи', 'ЁЯМЯ~~~ЁЯМЯ', 'ЁЯФе---ЁЯФе', 'тЪб***тЪб', 'ЁЯжБ~~~ЁЯжБ', 'ЁЯТл===ЁЯТл', 'ЁЯМИ---ЁЯМИ'];
        const emojiSets = ['ЁЯМЯЁЯФе', 'тЪбЁЯМИ', 'ЁЯжБЁЯШО', 'ЁЯМ╕тЬи', 'ЁЯФеЁЯОЙ', 'ЁЯМЯЁЯЪА', 'ЁЯТеЁЯМ╣'];
        const salutations = [
          'рдЖ рдЧрдпрд╛!',
          'рд╣рд╛рдЬрд┐рд░ рд╣реИ!',
          'рдзрдорд╛рдХрд╛ рдХрд░реЗрдЧрд╛!',
          'рддрдЧрдбрд╝рд╛ рдХреЛрдЯ!',
          'рдЪреЗрдХ рдХрд░реЛ!'
        ];

        const selectedQuote = quotes[Math.floor(Math.random() * quotes.length)];
        const selectedDecorativeLine = decorativeLines[Math.floor(Math.random() * decorativeLines.length)];
        const selectedSalutation = salutations[Math.floor(Math.random() * salutations.length)];
        const selectedEmojiSet = emojiSets[Math.floor(Math.random() * emojiSets.length)];

        console.log(`[DEBUG] Selected quote: ${selectedQuote}, decorative line: ${selectedDecorativeLine}, salutation: ${selectedSalutation}, emoji set: ${selectedEmojiSet}`);
        message = `${selectedDecorativeLine}\n` +
                  `тШЮя╕О рд╣реЙрдЯ рдХреЛрдЯ ${selectedSalutation}\n` +
                  `рдХреЛрдЯ: ${selectedQuote}\n` +
                  `${selectedEmojiSet}\n` +
                  `${selectedDecorativeLine}`;
      }

      try {
        console.log('[DEBUG] Sending hotquote message');
        await api.sendMessage({
          body: message,
          mentions: mentions
        }, threadID);
        console.log('[DEBUG] Hotquote message sent successfully');
      } catch (err) {
        console.error(`[ERROR] Failed to send hotquote message: ${err.message}`);
        return api.sendMessage(`тЪая╕П рдореИрд╕реЗрдЬ рднреЗрдЬрдиреЗ рдореЗрдВ рдЧрд▓рддреА: ${err.message} ЁЯХЙя╕П`, threadID);
      }
    } catch (err) {
      console.error(`[ERROR] Hotquote command error: ${err.message}`);
      api.sendMessage(`тЭМ рдХрдорд╛рдВрдб рдЪрд▓рд╛рдиреЗ рдореЗрдВ рдЧрд▓рддреА: ${err.message} ЁЯХЙя╕П`, threadID);
    }
  }
};
