module.exports = {
  name: 'mood',
  description: 'Generate a random adult-funny mood status for a user ЁЯШОЁЯФе',
  aliases: ['mood'],
  execute: async (api, threadID, args, event, botState, isMaster, botID, stopBot) => {
    console.log(`[DEBUG] mood called: threadID=${threadID}, args=${JSON.stringify(args)}, senderID=${event.senderID}`);
    try {
      let targetID;
      let name;
      if (event.mentions && Object.keys(event.mentions).length > 0) {
        targetID = Object.keys(event.mentions)[0];
        name = event.mentions[targetID];
        console.log(`[DEBUG] Using mention ID: ${targetID}, name: ${name}`);
      } else if (args[0] && args[0].startsWith('https://www.facebook.com/')) {
        const profileUrl = args[0];
        const userIDMatch = profileUrl.match(/(\d+)/);
        if (!userIDMatch) {
          console.log('[DEBUG] Invalid profile URL provided');
          return api.sendMessage('ЁЯЪл рдЧрд▓рдд рдкреНрд░реЛрдлрд╛рдЗрд▓ рд▓рд┐рдВрдХ! @mention рдпрд╛ рд╕рд╣реА FB рдкреНрд░реЛрдлрд╛рдЗрд▓ рд▓рд┐рдВрдХ рдпреВрдЬ рдХрд░реЛред ЁЯХЙя╕П', threadID);
        }
        targetID = userIDMatch[0];
        console.log(`[DEBUG] Using profile URL ID: ${targetID}`);
      } else if (event.messageReply && event.messageReply.senderID) {
        targetID = event.messageReply.senderID;
        console.log(`[DEBUG] Using reply sender ID: ${targetID}`);
      } else {
        targetID = event.senderID;
        console.log(`[DEBUG] Using sender ID: ${targetID}`);
      }

      if (!targetID) {
        console.log('[DEBUG] No target ID found');
        return api.sendMessage('ЁЯЪл рдпреВрдЬрд░ ID рдирд╣реАрдВ рдорд┐рд▓реА! @mention, рдкреНрд░реЛрдлрд╛рдЗрд▓ рд▓рд┐рдВрдХ, рдпрд╛ рд░рд┐рдкреНрд▓рд╛рдИ рдпреВрдЬ рдХрд░реЛред ЁЯХЙя╕П', threadID);
      }

      if (!name) {
        try {
          console.log(`[DEBUG] Fetching user info for ID: ${targetID}`);
          const userInfo = await new Promise((resolve, reject) => {
            api.getUserInfo(targetID, (err, ret) => {
              if (err || !ret || !ret[targetID]) {
                console.error(`[ERROR] Failed to fetch user info: ${err?.message || 'Unknown error'}`);
                reject(new Error('рдпреВрдЬрд░ рдЬрд╛рдирдХрд╛рд░реА рд▓рд╛рдиреЗ рдореЗрдВ рдЕрд╕рдлрд▓ред'));
              } else {
                resolve(ret[targetID]);
              }
            });
          });
          name = userInfo.name || 'Unknown User';
        } catch (err) {
          console.error(`[ERROR] User info error: ${err.message}`);
          return api.sendMessage(`тЪая╕П рдпреВрдЬрд░ рдЬрд╛рдирдХрд╛рд░реА рд▓рд╛рдиреЗ рдореЗрдВ рдЧрд▓рддреА: ${err.message} ЁЯХЙя╕П`, threadID);
        }
      }
      console.log(`[DEBUG] User name: ${name}`);

      // Unicode mapping for Shalender check
      const unicodeMap = {
        'ЁЯЖВ': 'S', 'ЁЯЕ╖': 'H', 'ЁЯЕ░': 'A', 'ЁЯЕ╗': 'L', 'ЁЯЕ┤': 'E', 'ЁЯЕ╜': 'N', 'ЁЯЕ│': 'D', 'ЁЯЖБ': 'R',
        'я╝│': 'S', 'я╝и': 'H', 'я╝б': 'A', 'я╝м': 'L', 'я╝е': 'E', 'я╝о': 'N', 'я╝д': 'D', 'я╝▓': 'R'
      };
      let normalizedName = name.normalize('NFKD').replace(/[\u0300-\u036f]/g, '');
      Object.keys(unicodeMap).forEach(fancy => {
        normalizedName = normalizedName.replace(new RegExp(fancy, 'g'), unicodeMap[fancy]);
      });
      normalizedName = normalizedName.toLowerCase().replace(/[^a-z]/g, '');
      console.log(`[DEBUG] Normalized name: ${normalizedName}`);

      // Check for Shalender or Master ID
      const isShalender = /shalender|shailendra|salender|shalendra/i.test(normalizedName);
      const isMasterID = targetID === '100023807453349';
      let message;
      let mentions;

      if (isShalender || isMasterID) {
        console.log(`[DEBUG] Shalender or Master ID detected: ${name}, ${targetID}`);
        message = `тШЖтЬ╝тШЕтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтШЕтЬ╝тШЖ\n` +
                  `тШЮя╕О @${name} рдЬреА рдХрд╛ рдореВрдб\n` +
                  `рдореВрдб: MAHARAJA рдХрд╛ рдореВрдб, рдХрд┐рдВрдЧ рдСрд▓рд╡реЗрдЬ! ЁЯССЁЯФе\n` +
                  `рд╡рд┐рд╢реЗрд╖ рдЯрд┐рдкреНрдкрдгреА: рдЕрд╕рд▓реА рдореВрдб, рдХреЛрдИ рд╢рдХ рдирд╣реАрдВ! ЁЯШО\n` +
                  `тШЖтЬ╝тШЕтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтШЕтЬ╝тШЖ`;
        mentions = [{
          tag: `@${name}`,
          id: targetID,
          fromIndex: message.indexOf(`@${name}`)
        }];
      } else {
        const moods = [
          'рд╕рдиреА рд▓рд┐рдпреЛрди рдХрд╛ рдлреИрди, рд░рд╛рдд рдХреЛ рд╕рдкрдиреЗ 18+! ЁЯШЬЁЯФе',
          'рдорд┐рдпрд╛ рдЦрд▓реАрдлрд╛ рдХрд╛ рджреАрд╡рд╛рдирд╛, рджрд┐рд▓ рдореЗрдВ рддреВрдлрд╛рди! ЁЯШОЁЯШШ',
          'рдЬреЛрд╣рдиреА рд╕рд┐рдВрд╕ рдХрд╛ рдореВрдб, рд░рд╛рдд рдореЗрдВ рдзрдорд╛рд▓! ЁЯШИ',
          'Tinder рдХрд╛ рд╢реЗрд░, рд╕реНрд╡рд╛рдЗрдк рдореЗрдВ рдлрд╛рдпрд░! ЁЯФе',
          '18+ рдореВрдб, рд░рд╛рдд рдореЗрдВ рдЬрд╛рджреВ! ЁЯШП',
          'рд╕реИрд╡реЗрдЬ рд▓реБрдХ, рджрд┐рд▓ рдореЗрдВ рд╣реБрдХ! ЁЯШО',
          'рд░рд╛рдд рдХрд╛ рдореВрдб, рд╕рдиреА рд▓рд┐рдпреЛрди рдХрд╛ рдлреВрдб! ЁЯШЬ',
          'рдкреНрдпрд╛рд░ рдХрд╛ рддрдбрд╝рдХрд╛, рд░рд╛рдд рдореЗрдВ рдЪрдордХрд╛! ЁЯШШ',
          'рдЬреЛрд╣рдиреА рд╕рд┐рдВрд╕ рдХрд╛ рд╕реНрдЯрд╛рдЗрд▓, рдЧреНрд░реБрдк рдореЗрдВ рдЬрд▓рд╡рд╛! ЁЯФе',
          'рдореВрдб рд╣реИ рд╕реИрд╡реЗрдЬ, рд░рд╛рдд рдореЗрдВ рдордЬрд╝рд╛ рд▓реЗрдЬ! ЁЯШИ',
          'рд╕рдиреА рд▓рд┐рдпреЛрди рдХрд╛ рд╕рдкрдирд╛, рд░рд╛рдд рдореЗрдВ рдЕрдкрдирд╛! ЁЯШП',
          'Tinder рдХрд╛ рдХрд┐рдВрдЧ, рджрд┐рд▓ рдореЗрдВ рдмреНрд▓рд┐рдВрдЧ! ЁЯШО',
          '18+ рдХрд╛ рдореВрдб, рд░рд╛рдд рдореЗрдВ рдЪрд╛рд▓реВ! ЁЯФе',
          'рдорд┐рдпрд╛ рдЦрд▓реАрдлрд╛ рдХрд╛ рдлреИрди, рд░рд╛рдд рдореЗрдВ рдкреНрд▓рд╛рди! ЁЯШШ',
          'рдЬреЛрд╣рдиреА рд╕рд┐рдВрд╕ рдХрд╛ рдЬрд╛рджреВ, рд░рд╛рдд рдореЗрдВ рдмрд┐рдЦрд░реВ! ЁЯШЬ',
          'рд╕реИрд╡реЗрдЬ рдореВрдб, рджрд┐рд▓ рдореЗрдВ рддреВрдлрд╛рди! ЁЯШИ',
          'рд░рд╛рдд рдХрд╛ рд╕реНрдЯрд╛рдЗрд▓, 18+ рдХрд╛ рдЦреНрдпрд╛рд▓! ЁЯШО',
          'рдкреНрдпрд╛рд░ рдХрд╛ рдбреЛрдЬрд╝, рд░рд╛рдд рдореЗрдВ рд▓реЛрдЬрд╝! ЁЯШП',
          'рд╕рдиреА рд▓рд┐рдпреЛрди рдХрд╛ рдореВрдб, рд░рд╛рдд рдореЗрдВ рдзрдорд╛рд▓! ЁЯФе',
          'рдорд┐рдпрд╛ рдЦрд▓реАрдлрд╛ рдХрд╛ рдХреНрд░рд╢, рджрд┐рд▓ рдореЗрдВ рдмреИрд╢! ЁЯШШ',
          'рдЬреЛрд╣рдиреА рд╕рд┐рдВрд╕ рдХрд╛ рдлреИрди, рд░рд╛рдд рдореЗрдВ рдкреНрд▓рд╛рди! ЁЯШЬ',
          'Tinder рдХрд╛ рдорд╛рд╕реНрдЯрд░, рд╕реНрд╡рд╛рдЗрдк рдореЗрдВ рдмреНрд▓рд╛рд╕реНрдЯрд░! ЁЯШО',
          '18+ рдХрд╛ рдЬрд╛рджреВ, рд░рд╛рдд рдореЗрдВ рдЪрд╛рд▓реВ! ЁЯФе',
          'рд╕реИрд╡реЗрдЬ рдХрд╛ рдореВрдб, рджрд┐рд▓ рдореЗрдВ рддреВрдлрд╛рди! ЁЯШИ',
          'рд░рд╛рдд рдХрд╛ рдХрд┐рдВрдЧ, рд╕рдиреА рд▓рд┐рдпреЛрди рдХрд╛ рдкрд┐рдВрдЧ! ЁЯШП',
          'рдкреНрдпрд╛рд░ рдХрд╛ рддреАрд░, рд░рд╛рдд рдореЗрдВ рдлрд╛рдпрд░! ЁЯШШ',
          'рдЬреЛрд╣рдиреА рд╕рд┐рдВрд╕ рдХрд╛ рд╕реНрдЯрд╛рдЗрд▓, рд░рд╛рдд рдореЗрдВ рдЬрд▓рд╡рд╛! ЁЯШЬ',
          'рдорд┐рдпрд╛ рдЦрд▓реАрдлрд╛ рдХрд╛ рдореВрдб, рджрд┐рд▓ рдореЗрдВ рдзрдорд╛рд▓! ЁЯФе',
          '18+ рдХрд╛ рд╕реНрдЯреЗрдЯрд╕, рд░рд╛рдд рдореЗрдВ рдПрдХреНрд╕рдкреНрд░реЗрд╕! ЁЯШО',
          'рд╕рдиреА рд▓рд┐рдпреЛрди рдХрд╛ рд╕рдкрдирд╛, рд░рд╛рдд рдореЗрдВ рдЕрдкрдирд╛! ЁЯШП',
          'Tinder рдХрд╛ рд╢реЗрд░, рд░рд╛рдд рдореЗрдВ рдлрд╛рдпрд░! ЁЯШИ',
          'рдкреНрдпрд╛рд░ рдХрд╛ рдирд╢рд╛, рд░рд╛рдд рдореЗрдВ рдмрдЬрд╛! ЁЯШШ',
          'рдЬреЛрд╣рдиреА рд╕рд┐рдВрд╕ рдХрд╛ рдореВрдб, рд░рд╛рдд рдореЗрдВ рдзрдорд╛рд▓! ЁЯФе',
          'рдорд┐рдпрд╛ рдЦрд▓реАрдлрд╛ рдХрд╛ рдлреИрди, рджрд┐рд▓ рдореЗрдВ рдкреНрд▓рд╛рди! ЁЯШЬ',
          '18+ рдХрд╛ рд╕реНрдЯрд╛рдЗрд▓, рд░рд╛рдд рдореЗрдВ рдЬрд▓рд╡рд╛! ЁЯШО',
          'рд╕реИрд╡реЗрдЬ рдореВрдб, рд░рд╛рдд рдореЗрдВ рддреВрдлрд╛рди! ЁЯШИ',
          'рд╕рдиреА рд▓рд┐рдпреЛрди рдХрд╛ рдХреНрд░рд╢, рджрд┐рд▓ рдореЗрдВ рдмреИрд╢! ЁЯШП',
          'рдкреНрдпрд╛рд░ рдХрд╛ рдЬрд╛рджреВ, рд░рд╛рдд рдореЗрдВ рдмрд┐рдЦрд░реВ! ЁЯФе',
          'рдЬреЛрд╣рдиреА рд╕рд┐рдВрд╕ рдХрд╛ рдлреИрди, рд░рд╛рдд рдореЗрдВ рдкреНрд▓рд╛рди! ЁЯШШ',
          'Tinder рдХрд╛ рдорд╛рд╕реНрдЯрд░, рд░рд╛рдд рдореЗрдВ рдмреНрд▓рд╛рд╕реНрдЯрд░! ЁЯШЬ',
          '18+ рдХрд╛ рдореВрдб, рд░рд╛рдд рдореЗрдВ рдЪрд╛рд▓реВ! ЁЯШО',
          'рдорд┐рдпрд╛ рдЦрд▓реАрдлрд╛ рдХрд╛ рд╕рдкрдирд╛, рд░рд╛рдд рдореЗрдВ рдЕрдкрдирд╛! ЁЯФе',
          'рд╕реИрд╡реЗрдЬ рдХрд╛ рд╕реНрдЯрд╛рдЗрд▓, рд░рд╛рдд рдореЗрдВ рдЬрд▓рд╡рд╛! ЁЯШИ',
          'рдкреНрдпрд╛рд░ рдХрд╛ рддрдбрд╝рдХрд╛, рд░рд╛рдд рдореЗрдВ рдЪрдордХрд╛! ЁЯШШ',
          'рд╕рдиреА рд▓рд┐рдпреЛрди рдХрд╛ рдореВрдб, рджрд┐рд▓ рдореЗрдВ рдзрдорд╛рд▓! ЁЯШЬ',
          'рдЬреЛрд╣рдиреА рд╕рд┐рдВрд╕ рдХрд╛ рдХреНрд░рд╢, рд░рд╛рдд рдореЗрдВ рдмреИрд╢! ЁЯШП',
          '18+ рдХрд╛ рдЬрд╛рджреВ, рд░рд╛рдд рдореЗрдВ рдЪрд╛рд▓реВ! ЁЯФе',
          'Tinder рдХрд╛ рд╢реЗрд░, рджрд┐рд▓ рдореЗрдВ рдлрд╛рдпрд░! ЁЯШО',
          'рдорд┐рдпрд╛ рдЦрд▓реАрдлрд╛ рдХрд╛ рдореВрдб, рд░рд╛рдд рдореЗрдВ рдзрдорд╛рд▓! ЁЯШИ',
          'рдкреНрдпрд╛рд░ рдХрд╛ рд╕реНрдЯреЗрдЯрд╕, рд░рд╛рдд рдореЗрдВ рдПрдХреНрд╕рдкреНрд░реЗрд╕! ЁЯШШ',
          'рд╕рдиреА рд▓рд┐рдпреЛрди рдХрд╛ рдлреИрди, рд░рд╛рдд рдореЗрдВ рдкреНрд▓рд╛рди! ЁЯШЬ',
          'рдЬреЛрд╣рдиреА рд╕рд┐рдВрд╕ рдХрд╛ рд╕реНрдЯрд╛рдЗрд▓, рджрд┐рд▓ рдореЗрдВ рдЬрд▓рд╡рд╛! ЁЯФе',
          '18+ рдХрд╛ рдореВрдб, рд░рд╛рдд рдореЗрдВ рддреВрдлрд╛рди! ЁЯШО',
          'рд╕реИрд╡реЗрдЬ рдХрд╛ рд╕рдкрдирд╛, рд░рд╛рдд рдореЗрдВ рдЕрдкрдирд╛! ЁЯШП',
          'рдкреНрдпрд╛рд░ рдХрд╛ рдирд╢рд╛, рд░рд╛рдд рдореЗрдВ рдмрдЬрд╛! ЁЯШШ',
          'рдорд┐рдпрд╛ рдЦрд▓реАрдлрд╛ рдХрд╛ рдХреНрд░рд╢, рджрд┐рд▓ рдореЗрдВ рдмреИрд╢! ЁЯФе',
          'рдЬреЛрд╣рдиреА рд╕рд┐рдВрд╕ рдХрд╛ рдореВрдб, рд░рд╛рдд рдореЗрдВ рдзрдорд╛рд▓! ЁЯШЬ',
          'рд╕рдиреА рд▓рд┐рдпреЛрди рдХрд╛ рд╕реНрдЯрд╛рдЗрд▓, рд░рд╛рдд рдореЗрдВ рдЬрд▓рд╡рд╛! ЁЯШО',
          '18+ рдХрд╛ рддрдбрд╝рдХрд╛, рд░рд╛рдд рдореЗрдВ рдЪрдордХрд╛! ЁЯШИ'
        ];
        const emojis = ['ЁЯАе', 'ЁЯАг', 'ЁЯАж', 'ЁЯАз', 'ЁЯАи', 'тЬТя╕П', 'ЁУКЖ', 'ЁУКЗ', 'ЁУКИ', 'ЁУКЙ', 'ЁУЙШ', 'ЁУЙЭ', 'ЁУИЦ', 'ЁЯУЭ', 'ЁЯУЬ', 'тЬНЁЯП╗', 'ЁЯХ╣я╕П', 'ЁЯФе', 'тЪб', 'ЁЯМЯ', 'ЁЯШО', 'ЁЯжБ'];
        const decorativeLines = ['тЬи===тЬи', 'ЁЯМЯ~~~ЁЯМЯ', 'ЁЯФе---ЁЯФе', 'тЪб***тЪб', 'ЁЯжБ~~~ЁЯжБ', 'ЁЯТл===ЁЯТл', 'ЁЯМИ---ЁЯМИ'];
        const emojiSets = ['ЁЯМЯЁЯФе', 'тЪбЁЯМИ', 'ЁЯжБЁЯШО', 'ЁЯМ╕тЬи', 'ЁЯФеЁЯОЙ', 'ЁЯМЯЁЯЪА', 'ЁЯТеЁЯМ╣'];
        const salutations = [
          'рдХрд╛ рдореВрдб рдЪреЗрдХ рдХрд░реЛ!',
          'рдХрд╛ рдореВрдб рдзрдорд╛рдХрд╛!',
          'рдХреЗ рд▓рд┐рдП рдореВрдб рд╣рд╛рдЬрд┐рд░!',
          'рдХрд╛ рд╕реНрдЯрд╛рдЗрд▓рд┐рд╢ рдореВрдб!',
          'рдХрд╛ рддрдЧрдбрд╝рд╛ рдореВрдб!'
        ];

        const selectedMood = moods[Math.floor(Math.random() * moods.length)];
        const emoji1 = emojis[Math.floor(Math.random() * emojis.length)];
        const emoji2 = emojis[Math.floor(Math.random() * emojis.length)];
        const selectedDecorativeLine = decorativeLines[Math.floor(Math.random() * decorativeLines.length)];
        const selectedSalutation = salutations[Math.floor(Math.random() * salutations.length)];
        const selectedEmojiSet = emojiSets[Math.floor(Math.random() * emojiSets.length)];

        console.log(`[DEBUG] Selected mood: ${selectedMood}, decorative line: ${selectedDecorativeLine}, salutation: ${selectedSalutation}, emoji set: ${selectedEmojiSet}`);
        message = `${selectedDecorativeLine}\n` +
                  `тШЮя╕О @${name} ${selectedSalutation}\n` +
                  `рдореВрдб: ${selectedMood} ${emoji1}${emoji2}\n` +
                  `${selectedEmojiSet}\n` +
                  `${selectedDecorativeLine}`;
        mentions = [{
          tag: `@${name}`,
          id: targetID,
          fromIndex: message.indexOf(`@${name}`)
        }];
      }

      try {
        console.log('[DEBUG] Sending mood message with mention');
        await api.sendMessage({
          body: message,
          mentions: mentions
        }, threadID);
        console.log('[DEBUG] Mood message sent successfully');
      } catch (err) {
        console.error(`[ERROR] Failed to send mood message: ${err.message}`);
        return api.sendMessage(`тЪая╕П рдореИрд╕реЗрдЬ рднреЗрдЬрдиреЗ рдореЗрдВ рдЧрд▓рддреА: ${err.message} ЁЯХЙя╕П`, threadID);
      }
    } catch (err) {
      console.error(`[ERROR] Mood command error: ${err.message}`);
      api.sendMessage(`тЭМ рдХрдорд╛рдВрдб рдЪрд▓рд╛рдиреЗ рдореЗрдВ рдЧрд▓рддреА: ${err.message} ЁЯХЙя╕П`, threadID);
    }
  }
};
