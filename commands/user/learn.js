const fs = require('fs');

module.exports = {
    handleLearn: (api, threadID, args, event, botState, isMaster, msg, learnedResponses, LEARNED_RESPONSES_PATH) => {
        console.log(`[DEBUG] handleLearn called: threadID=${threadID}, msg=${msg}`);
        try {
            if (!isMaster && !botState.adminList.includes(event.senderID)) {
                api.sendMessage('üö´ ‡§ï‡•á‡§µ‡§≤ ‡§Æ‡§æ‡§∏‡•ç‡§ü‡§∞ ‡§Ø‡§æ ‡§è‡§°‡§Æ‡§ø‡§® ‡§á‡§∏ ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§ï‡•ã ‡§Ø‡•Ç‡§ú ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§', threadID);
                return;
            }

            if (typeof msg !== 'string') {
                console.error('[ERROR] msg is not a string in handleLearn:', typeof msg);
                api.sendMessage('‚ö†Ô∏è ‡§≤‡§∞‡•ç‡§® ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§Æ‡•á‡§Ç ‡§ó‡§≤‡§§‡•Ä‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§∏‡§π‡•Ä ‡§´‡•â‡§∞‡•ç‡§Æ‡•á‡§ü ‡§Ø‡•Ç‡§ú ‡§ï‡§∞‡•á‡§Ç‡•§', threadID);
                return;
            }

            const match = msg.match(/^#learn \((.*?)\) \{(.*?)\}$/i);
            if (!match) {
                api.sendMessage('‚ùå ‡§∏‡§π‡•Ä ‡§´‡•â‡§∞‡•ç‡§Æ‡•á‡§ü: #learn (trigger) {response}', threadID);
                return;
            }

            const trigger = match[1].trim();
            const response = match[2].trim();
            if (!trigger || !response) {
                api.sendMessage('‚ö†Ô∏è ‡§ü‡•ç‡§∞‡§ø‡§ó‡§∞ ‡§Ø‡§æ ‡§∞‡§ø‡§∏‡•ç‡§™‡•â‡§®‡•ç‡§∏ ‡§ñ‡§æ‡§≤‡•Ä ‡§®‡§π‡•Ä‡§Ç ‡§π‡•ã ‡§∏‡§ï‡§§‡§æ‡•§', threadID);
                return;
            }

            const triggerLower = trigger.toLowerCase();
            if (triggerLower.includes('shalender') || triggerLower.includes('selender')) {
                api.sendMessage('shalender king h or king hi rahega', threadID);
                return;
            }

            learnedResponses.triggers.push({ trigger, response });
            fs.writeFileSync(LEARNED_RESPONSES_PATH, JSON.stringify(learnedResponses, null, 2));
            api.sendMessage(`‚úÖ ‡§®‡§Ø‡§æ ‡§∞‡§ø‡§∏‡•ç‡§™‡•â‡§®‡•ç‡§∏ ‡§∏‡•Ä‡§ñ‡§æ ‡§ó‡§Ø‡§æ!\n‡§ü‡•ç‡§∞‡§ø‡§ó‡§∞: ${trigger}\n‡§∞‡§ø‡§∏‡•ç‡§™‡•â‡§®‡•ç‡§∏: ${response}`, threadID);
            console.log(`[SUCCESS] Learned new response for trigger "${trigger}"`);
        } catch (e) {
            console.error('[ERROR] handleLearn error:', e.message, e.stack);
            api.sendMessage('‚ö†Ô∏è ‡§≤‡§∞‡•ç‡§® ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§Æ‡•á‡§Ç ‡§ó‡§≤‡§§‡•Ä‡•§', threadID);
        }
    }
};
