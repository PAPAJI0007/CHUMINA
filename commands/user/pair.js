const axios = require('axios');

module.exports = {
  name: "pair",
  execute(api, threadID, args, event, botState, isMaster, botID) {
    try {
      api.getThreadInfo(threadID, (err, info) => {
        if (err || !info?.participantIDs) {
          api.sendMessage('‡§ó‡•ç‡§∞‡•Å‡§™ ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡•Ä!', threadID);
          console.error('ThreadInfo error for pair:', err);
          return;
        }

        const members = info.participantIDs.filter(id => id !== botID);
        if (members.length < 2) {
          api.sendMessage('‡§ú‡•ã‡§°‡§º‡§æ ‡§¨‡§®‡§æ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡§Æ ‡§∏‡•á ‡§ï‡§Æ 2 ‡§≤‡•ã‡§ó ‡§ö‡§æ‡§π‡§ø‡§è!', threadID);
          return;
        }

        const random1 = members[Math.floor(Math.random() * members.length)];
        let random2 = members[Math.floor(Math.random() * members.length)];
        while (random2 === random1) {
          random2 = members[Math.floor(Math.random() * members.length)];
        }

        api.getUserInfo([random1, random2], async (err, ret) => {
          if (err || !ret) {
            api.sendMessage('‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡•Ä!', threadID);
            console.error('UserInfo error for pair:', err);
            return;
          }

          const name1 = ret[random1]?.name || 'User1';
          const name2 = ret[random2]?.name || 'User2';
          const profilePic1 = ret[random1]?.thumbSrc || null;
          const profilePic2 = ret[random2]?.thumbSrc || null;

          const pairMessages = [
            `‡§á‡§® ‡§¶‡•ã‡§®‡•ã‡§Ç ‡§ï‡•Ä ‡§™‡§∏‡§Ç‡§¶ ‡§≤‡§ó‡§≠‡§ó ‡§è‡§ï ‡§ú‡•à‡§∏‡•Ä ‡§π‡•à ‡§Ø‡•á ‡§Ö‡§ö‡•ç‡§õ‡•á ‡§¶‡•ã‡§∏‡•ç‡§§ ‡§¨‡§® ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç üòé`,
            `‡§Ø‡•á ‡§¶‡•ã‡§®‡•ã‡§Ç ‡§∏‡§¨‡§∏‡•á ‡§ú‡•ç‡§Ø‡§æ‡§¶‡§æ ‡§è‡§ï ‡§ú‡•à‡§∏‡•á ‡§π‡•à‡§Ç ‡§á‡§® ‡§¶‡•ã‡§®‡•ã‡§Ç ‡§ï‡•Ä ‡§¨‡•â‡§®‡•ç‡§°‡§ø‡§Ç‡§ó ‡§Ö‡§ö‡•ç‡§õ‡•Ä ‡§¨‡§® ‡§∏‡§ï‡§§‡•Ä ‡§π‡•à ‚ù§Ô∏è`,
            `‡§Ø‡•á ‡§¶‡•ã‡§®‡•ã‡§Ç ‡§ï‡§Æ‡§æ‡§≤ ‡§ï‡•á ‡§¨‡§Ç‡§¶‡•á ‡§π‡•à‡§Ç ‡§Ø‡§æ‡§∞ üî•`
          ];
          const randomMsg = pairMessages[Math.floor(Math.random() * pairMessages.length)];

          const msgBody = `üíë ‡§Ø‡•á ‡§≤‡•ã ‡§§‡•Å‡§Æ‡•ç‡§π‡§æ‡§∞‡§æ ‡§ú‡•ã‡§°‡§º‡§æ! ${name1} ‡§î‡§∞ ${name2}!\n${randomMsg}\n‡§Ø‡•á ‡§¶‡•ã‡§®‡•ã‡§Ç ‡§¨‡•á‡§∏‡•ç‡§ü ‡§¨‡§°‡•ç‡§°‡•Ä‡§ú‡§º ‡§¨‡§® ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç, ‡§∏‡§æ‡§• ‡§Æ‡•á‡§Ç ‡§Æ‡§∏‡•ç‡§§‡•Ä ‡§ï‡§∞‡•ã ‡§Ø‡§æ‡§∞! üòé\n‡§µ‡§æ‡§π! ‡§Ø‡•á ‡§¶‡•ã‡§∏‡•ç‡§§‡•Ä ‡§ï‡•Ä ‡§ú‡•ã‡§°‡§º‡•Ä ‡§π‡•à, ‡§è‡§ï-‡§¶‡•Ç‡§∏‡§∞‡•á ‡§ï‡§æ ‡§∏‡§æ‡§• ‡§®‡§ø‡§≠‡§æ‡§ì! ‚ù§Ô∏è\n‡§Ø‡•á ‡§¶‡•ã‡§®‡•ã‡§Ç ‡§è‡§ï-‡§¶‡•Ç‡§∏‡§∞‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§™‡§∞‡§´‡•á‡§ï‡•ç‡§ü ‡§¶‡•ã‡§∏‡•ç‡§§ ‡§π‡•à‡§Ç, ‡§Æ‡§ú‡§æ ‡§Ü ‡§ú‡§æ‡§è‡§ó‡§æ! üî•\n‡§Ö‡§∞‡•á ‡§µ‡§æ‡§π! ‡§Ø‡•á ‡§ú‡•ã‡§°‡§º‡•Ä ‡§§‡•ã ‡§ó‡§ú‡§º‡§¨ ‡§ï‡•Ä ‡§¶‡•ã‡§∏‡•ç‡§§‡•Ä ‡§ï‡•Ä ‡§Æ‡§ø‡§∏‡§æ‡§≤ ‡§¨‡§®‡•á‡§ó‡•Ä! üéâ\n‡§Ø‡•á ‡§¶‡•ã‡§®‡•ã‡§Ç ‡§è‡§ï-‡§¶‡•Ç‡§∏‡§∞‡•á ‡§ï‡•á ‡§¶‡•Å‡§∑‡•ç‡§Æ‡§® ‡§¨‡§® ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç, ‡§≤‡•á‡§ï‡§ø‡§® ‡§Æ‡§ú‡§º‡•á ‡§ï‡•Ä ‡§¨‡§æ‡§§ ‡§π‡•à! üòÇ\n‡§Ø‡•á ‡§¨‡§°‡•ç‡§°‡•Ä‡§ú‡§º ‡§Æ‡§ø‡§≤‡•á‡§Ç ‡§§‡•ã ‡§π‡§∞ ‡§™‡§≤ ‡§π‡§Ç‡§∏‡•Ä-‡§Æ‡§ú‡§æ‡§ï ‡§∏‡•á ‡§≠‡§∞‡§æ ‡§π‡•ã‡§ó‡§æ! üòÑ`;
          const mentions = [
            { tag: name1, id: random1 },
            { tag: name2, id: random2 }
          ];

          let attachments = [];
          if (profilePic1) {
            try {
              const pic1 = await axios.get(profilePic1, { responseType: 'stream' });
              attachments.push(pic1.data);
            } catch (e) {
              console.error('Error fetching profile pic1:', e);
            }
          }
          if (profilePic2) {
            try {
              const pic2 = await axios.get(profilePic2, { responseType: 'stream' });
              attachments.push(pic2.data);
            } catch (e) {
              console.error('Error fetching profile pic2:', e);
            }
          }

          api.sendMessage({
            body: msgBody,
            mentions: mentions,
            attachment: attachments
          }, threadID);
          console.log(`Paired ${name1} and ${name2} in thread ${threadID}`);
        });
      });
    } catch (e) {
      api.sendMessage('‡§ú‡•ã‡§°‡§º‡§æ ‡§¨‡§®‡§æ‡§®‡•á ‡§Æ‡•á‡§Ç ‡§è‡§∞‡§∞ ‡§π‡•Å‡§Ü!', threadID);
      console.error('Pair command error:', e);
    }
  }
};
