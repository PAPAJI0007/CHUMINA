const fs = require('fs');
const path = require('path');
const ytdl = require('ytdl-core');
const yts = require('yt-search');

module.exports = {
  name: 'music',
  description: 'Plays a song from YouTube as an audio message.',
  async execute(api, threadID, args, event, botState, isMaster) {
    // 30 ‡§∏‡•á‡§ï‡§Ç‡§° ‡§ï‡•Ç‡§≤‡§°‡§æ‡§â‡§® ‡§ö‡•á‡§ï
    if (botState.commandCooldowns[threadID]?.music) {
      api.sendMessage(
        'üëë ‡§ï‡§ø‡§Ç‡§ó ‡§ï‡•á ‡§®‡§ø‡§Ø‡§Æ‡•ã‡§Ç ‡§ï‡•á ‡§π‡§ø‡§∏‡§æ‡§¨ ‡§∏‡•á ‡§Ö‡§ó‡§≤‡•Ä ‡§Æ‡•ç‡§Ø‡•Ç‡§ú‡§ø‡§ï ‡§ï‡§æ ‡§á‡§∏‡•ç‡§§‡§Æ‡§æ‡§≤ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ü‡§™‡§ï‡•ã 30 ‡§∏‡•á‡§ï‡§Ç‡§° ‡§ï‡§æ ‡§á‡§Ç‡§§‡§ú‡§º‡§æ‡§∞ ‡§ï‡§∞‡§®‡§æ ‡§π‡•ã‡§ó‡§æ‡•§ ‡§á‡§® 30 ‡§∏‡•á‡§ï‡§Ç‡§° ‡§Æ‡•á‡§Ç ‡§Ü‡§™ ‡§ï‡§ø‡§Ç‡§ó ‡§ï‡•Ä ‡§Æ‡§π‡§æ‡§®‡§§‡§æ ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§∏‡•ã‡§ö‡•á‡§Ç, ‡§µ‡•ã ‡§ï‡§ø‡§§‡§®‡•á ‡§¶‡§ø‡§≤‡•á‡§∞, ‡§ï‡§ø‡§§‡§®‡•á ‡§Æ‡§π‡§æ‡§®, ‡§ï‡§ø‡§§‡§®‡•á ‡§∂‡•Ç‡§∞‡§µ‡•Ä‡§∞, ‡§ï‡§ø‡§§‡§®‡•á ‡§™‡§∞‡§Æ‡§µ‡•Ä‡§∞ ‡§π‡•à‡§Ç! üëëüî•',
        threadID
      );
      return;
    }

    const query = args.slice(1).join(' ') || 'default song';

    // 200 ‡§Ö‡§ï‡•ç‡§∑‡§∞‡•ã‡§Ç ‡§ï‡•Ä ‡§∏‡§∞‡•ç‡§ö ‡§ü‡§∞‡•ç‡§Æ ‡§≤‡§ø‡§Æ‡§ø‡§ü
    if (query.length > 200) {
      api.sendMessage('‚ùå ‡§∏‡§∞‡•ç‡§ö ‡§ü‡§∞‡•ç‡§Æ ‡§ú‡•ç‡§Ø‡§æ‡§¶‡§æ ‡§≤‡§Ç‡§¨‡§æ ‡§π‡•à! 200 ‡§Ö‡§ï‡•ç‡§∑‡§∞‡•ã‡§Ç ‡§§‡§ï ‡§Ø‡•Ç‡§ú ‡§ï‡§∞‡•ã‡•§', threadID);
      return;
    }

    const audioPath = path.join(__dirname, `../../music_${threadID}_${Date.now()}.mp3`);

    try {
      // ‡§Ø‡•Ç‡§ü‡•ç‡§Ø‡•Ç‡§¨ ‡§™‡§∞ ‡§ó‡§æ‡§®‡§æ ‡§∏‡§∞‡•ç‡§ö ‡§ï‡§∞‡•á‡§Ç
      const searchResults = await yts(query);
      const video = searchResults.videos[0];
      if (!video) {
        api.sendMessage('‚ùå ‡§ï‡•ã‡§à ‡§ó‡§æ‡§®‡§æ ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ! ‡§∏‡§π‡•Ä ‡§®‡§æ‡§Æ ‡§°‡§æ‡§≤‡§ï‡§∞ ‡§¶‡•ã‡§¨‡§æ‡§∞‡§æ ‡§ü‡•ç‡§∞‡§æ‡§à ‡§ï‡§∞‡•ã‡•§ üé∂', threadID);
        return;
      }

      // ‡§Ø‡•Ç‡§ü‡•ç‡§Ø‡•Ç‡§¨ ‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã ‡§∏‡•á ‡§ë‡§°‡§ø‡§Ø‡•ã ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç
      const stream = ytdl(video.url, {
        filter: 'audioonly',
        quality: 'highestaudio',
        highWaterMark: 1 << 25 // ‡§Æ‡•á‡§Æ‡•ã‡§∞‡•Ä ‡§Æ‡•à‡§®‡•á‡§ú‡§Æ‡•á‡§Ç‡§ü ‡§ï‡•á ‡§≤‡§ø‡§è
      });

      const writeStream = fs.createWriteStream(audioPath);
      stream.pipe(writeStream);

      await new Promise((resolve, reject) => {
        writeStream.on('finish', resolve);
        writeStream.on('error', reject);
      });

      const message = {
        body: `üéµ ‡§ó‡§æ‡§®‡§æ: ${video.title} (${video.duration.toString()})`,
        attachment: fs.createReadStream(audioPath)
      };
      await new Promise((resolve, reject) => {
        api.sendMessage(message, threadID, (err) => {
          if (err) return reject(err);
          resolve();
        });
      });

      // ‡§ï‡•Ç‡§≤‡§°‡§æ‡§â‡§® ‡§∏‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç
      botState.commandCooldowns[threadID] = { music: true };
      setTimeout(() => delete botState.commandCooldowns[threadID]?.music, 30000);
    } catch (err) {
      api.sendMessage(`‚ùå ‡§ó‡§æ‡§®‡§æ ‡§≠‡•á‡§ú‡§®‡•á ‡§Æ‡•á‡§Ç ‡§ó‡§≤‡§§‡•Ä ‡§π‡•Å‡§à: ${err.message}`, threadID);
    } finally {
      // ‡§ë‡§°‡§ø‡§Ø‡•ã ‡§´‡§æ‡§á‡§≤ ‡§§‡•Å‡§∞‡§Ç‡§§ ‡§°‡§ø‡§≤‡•Ä‡§ü ‡§ï‡§∞‡•á‡§Ç
      if (fs.existsSync(audioPath)) {
        fs.unlink(audioPath, (unlinkErr) => {
          if (unlinkErr) console.error('Error deleting audio file:', unlinkErr.message);
        });
      }
    }
  }
};
