module.exports = {
    handleLoder: (api, threadID, args, event, botState, isMaster, abuseMessages, MASTER_ID) => {
        try {
            if (!isMaster && !botState.adminList.includes(event.senderID)) {
                api.sendMessage('üö´ ‡§ï‡•á‡§µ‡§≤ ‡§Æ‡§æ‡§∏‡•ç‡§ü‡§∞ ‡§Ø‡§æ ‡§è‡§°‡§Æ‡§ø‡§® ‡§á‡§∏ ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§ï‡•ã ‡§Ø‡•Ç‡§ú ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§', threadID);
                return;
            }

            if (args[1] === 'stop') {
                if (botState.abuseTargets[threadID]) {
                    delete botState.abuseTargets[threadID];
                    api.sendMessage('üõë ‡§ü‡§æ‡§∞‡§ó‡•á‡§ü‡§ø‡§Ç‡§ó ‡§¨‡§Ç‡§¶ ‡§ï‡§∞ ‡§¶‡•Ä ‡§ó‡§à‡•§', threadID);
                    broadcast({ type: 'log', message: `[7:55 AM IST] [User ${event.senderID}] Stopped loder in thread ${threadID}`, userId: event.senderID, color: '#00ff00' });
                } else {
                    api.sendMessage('‚ö†Ô∏è ‡§ï‡•ã‡§à ‡§ü‡§æ‡§∞‡§ó‡•á‡§ü‡§ø‡§Ç‡§ó ‡§ö‡§≤ ‡§®‡§π‡•Ä‡§Ç ‡§∞‡§π‡•Ä‡•§', threadID);
                }
                return;
            }

            if (args[1] !== 'target' || args[2] !== 'on' || !event.mentions || Object.keys(event.mentions).length === 0) {
                api.sendMessage('‚ùå ‡§∏‡§π‡•Ä ‡§´‡•â‡§∞‡•ç‡§Æ‡•á‡§ü: #loder target on @user', threadID);
                return;
            }

            const targetID = Object.keys(event.mentions)[0];
            if (targetID === MASTER_ID) {
                api.sendMessage('üö´ ‡§Æ‡§æ‡§∏‡•ç‡§ü‡§∞ ‡§ï‡•ã ‡§ü‡§æ‡§∞‡§ó‡•á‡§ü ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ ‡§∏‡§ï‡§§‡§æ!', threadID);
                return;
            }

            if (!abuseMessages.length) {
                api.sendMessage('‚ö†Ô∏è ‡§ï‡•ã‡§à ‡§ó‡§æ‡§≤‡•Ä ‡§Æ‡•à‡§∏‡•á‡§ú‡•á‡§∏ ‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡§Ç‡•§ ‡§™‡§π‡§≤‡•á abuse.txt ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç‡•§', threadID);
                return;
            }

            if (!botState.abuseTargets[threadID]) botState.abuseTargets[threadID] = {};
            if (botState.abuseTargets[threadID][targetID]) {
                api.sendMessage('‚ö†Ô∏è ‡§Ø‡•á ‡§Ø‡•Ç‡§ú‡§∞ ‡§™‡§π‡§≤‡•á ‡§∏‡•á ‡§ü‡§æ‡§∞‡§ó‡•á‡§ü‡•á‡§° ‡§π‡•à‡•§', threadID);
                return;
            }

            botState.abuseTargets[threadID][targetID] = true;
            api.getUserInfo(targetID, (err, ret) => {
                if (err || !ret || !ret[targetID]) {
                    api.sendMessage('‚ö†Ô∏è ‡§Ø‡•Ç‡§ú‡§∞ ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§≤‡§æ‡§®‡•á ‡§Æ‡•á‡§Ç ‡§Ö‡§∏‡§´‡§≤‡•§', threadID);
                    return;
                }
                const name = ret[targetID].name || 'User';
                api.sendMessage(`üòà ${name} ‡§ï‡•ã ‡§ü‡§æ‡§∞‡§ó‡•á‡§ü ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ! ‡§Ö‡§¨ ‡§π‡§∞ 2 ‡§Æ‡§ø‡§®‡§ü ‡§Æ‡•á‡§Ç ‡§ó‡§æ‡§≤‡§ø‡§Ø‡§æ‡§Ç ‡§Ü‡§è‡§Ç‡§ó‡•Ä!`, threadID);

                const spamLoop = async () => {
                    while (botState.abuseTargets[threadID]?.[targetID] && abuseMessages.length > 0) {
                        const randomMsg = abuseMessages[Math.floor(Math.random() * abuseMessages.length)];
                        const mentionTag = `@${name.split(' ')[0]}`;
                        await api.sendMessage({
                            body: `${mentionTag} ${randomMsg}`,
                            mentions: [{ tag: mentionTag, id: targetID }]
                        }, threadID);
                        await new Promise(r => setTimeout(r, 120000));
                    }
                };
                spamLoop();
            });

            broadcast({ type: 'log', message: `[7:55 AM IST] [User ${event.senderID}] Started loder on user ${targetID} in thread ${threadID}`, userId: event.senderID, color: '#00ff00' });
        } catch (err) {
            console.error('[ERROR] loder ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§Æ‡•á‡§Ç ‡§ó‡§≤‡§§‡•Ä:', err.message, err.stack);
            api.sendMessage('‚ö†Ô∏è loder ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§ö‡§≤‡§æ‡§®‡•á ‡§Æ‡•á‡§Ç ‡§ó‡§≤‡§§‡•Ä‡•§', threadID);
            broadcast({ type: 'error', message: `[7:55 AM IST] [User ${event.senderID}] loder ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§Æ‡•á‡§Ç ‡§ó‡§≤‡§§‡•Ä: ${err.message}`, userId: event.senderID, color: '#ff4444' });
        }
    }
};
