// commands/admin/autoconvo.js
const { broadcast } = require('../../utils/broadcast');

module.exports = {
  name: "autoconvo",
  execute(api, threadID, args, event, botState, isMaster) {
    try {
      if (!isMaster && !botState.adminList.includes(event.senderID)) {
        api.sendMessage('üö´ ‡§ï‡•á‡§µ‡§≤ ‡§Æ‡§æ‡§∏‡•ç‡§ü‡§∞ ‡§Ø‡§æ ‡§è‡§°‡§Æ‡§ø‡§® ‡§á‡§∏ ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§ï‡•ã ‡§Ø‡•Ç‡§ú ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§', threadID);
        return;
      }

      if (!botState.sessions[event.senderID]) {
        api.sendMessage('‚ö†Ô∏è ‡§¨‡•â‡§ü ‡§∏‡•á‡§∂‡§® ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ‡•§', threadID);
        return;
      }

      const botConfig = botState.sessions[event.senderID].botConfig || { autoConvo: false };
      const action = args[1]?.toLowerCase();

      if (action === 'on') {
        botConfig.autoConvo = true;
        api.sendMessage('‚úÖ ‡§ë‡§ü‡•ã ‡§ï‡§®‡•ç‡§µ‡§∞‡•ç‡§∏‡•á‡§∂‡§® ‡§ö‡§æ‡§≤‡•Ç ‡§ï‡§∞ ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ!', threadID);
      } else if (action === 'off') {
        botConfig.autoConvo = false;
        api.sendMessage('‚úÖ ‡§ë‡§ü‡•ã ‡§ï‡§®‡•ç‡§µ‡§∞‡•ç‡§∏‡•á‡§∂‡§® ‡§¨‡§Ç‡§¶ ‡§ï‡§∞ ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ!', threadID);
      } else {
        api.sendMessage('‚ùå ‡§Ø‡•Ç‡§ú: #autoconvo on/off', threadID);
        return;
      }

      botState.sessions[event.senderID].botConfig = botConfig;

      broadcast({
        type: 'settings',
        autoConvo: botConfig.autoConvo,
        autoSpamAccept: botConfig.autoSpamAccept,
        autoMessageAccept: botConfig.autoMessageAccept,
        userId: event.senderID
      });
    } catch (e) {
      console.error('[ERROR] autoconvo error:', e.message);
      api.sendMessage('‚ö†Ô∏è ‡§ë‡§ü‡•ã ‡§ï‡§®‡•ç‡§µ‡§∞‡•ç‡§∏‡•á‡§∂‡§® ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§Æ‡•á‡§Ç ‡§ó‡§≤‡§§‡•Ä‡•§', threadID);
    }
  }
};
