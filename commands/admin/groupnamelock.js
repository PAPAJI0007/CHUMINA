module.exports = {
    handleGroupNameLock: (api, threadID, args, event, botState, isMaster) => {
        console.log(`[DEBUG] handleGroupNameLock called: threadID=${threadID}, args=${JSON.stringify(args)}, isMaster=${isMaster}`);
        try {
            if (!isMaster && !botState.adminList.includes(event.senderID)) {
                api.sendMessage('ЁЯЪл рдХреЗрд╡рд▓ рдорд╛рд╕реНрдЯрд░ рдпрд╛ рдПрдбрдорд┐рди рдЗрд╕ рдХрдорд╛рдВрдб рдХреЛ рдпреВрдЬ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред', threadID);
                return;
            }

            if (args[1] === 'off') {
                if (botState.lockedGroups[threadID]) {
                    clearInterval(botState.lockedGroups[threadID].interval);
                    delete botState.lockedGroups[threadID];
                    api.sendMessage('ЁЯФУ рдЧреНрд░реБрдк рдирд╛рдо рд▓реЙрдХ рдмрдВрдж рдХрд░ рджрд┐рдпрд╛ рдЧрдпрд╛ред', threadID);
                    console.log(`[DEBUG] Group name lock stopped for thread ${threadID}`);
                } else {
                    api.sendMessage('тЪая╕П рдЧреНрд░реБрдк рдирд╛рдо рд▓реЙрдХ рдкрд╣рд▓реЗ рд╕реЗ рдмрдВрдж рд╣реИред', threadID);
                }
                return;
            }

            if (args[1] !== 'on' || !args[2]) {
                api.sendMessage('тЭМ рд╕рд╣реА рдлреЙрд░реНрдореЗрдЯ: #groupnamelock on <name> рдпрд╛ #groupnamelock off', threadID);
                return;
            }

            const groupName = args.slice(2).join(' ');

            api.getThreadInfo(threadID, (err, info) => {
                if (err || !info) {
                    api.sendMessage('тЪая╕П рдЧреНрд░реБрдк рдЬрд╛рдирдХрд╛рд░реА рд▓рд╛рдиреЗ рдореЗрдВ рдЕрд╕рдлрд▓ред', threadID);
                    return;
                }

                const botID = api.getCurrentUserID();
                const isBotAdmin = info.adminIDs.some(admin => admin.id === botID);
                if (!isBotAdmin) {
                    api.sendMessage('тЪая╕П рдЧреНрд░реБрдк рдирд╛рдо рд▓реЙрдХ рдХреЗ рд▓рд┐рдП рдмреЙрдЯ рдХреЛ рдПрдбрдорд┐рди рдкрд░рдорд┐рд╢рдиреНрд╕ рдЪрд╛рд╣рд┐рдПред', threadID);
                    return;
                }

                if (botState.lockedGroups[threadID]) {
                    api.sendMessage('тЪая╕П рдЧреНрд░реБрдк рдирд╛рдо рд▓реЙрдХ рдкрд╣рд▓реЗ рд╕реЗ рдЪрд╛рд▓реВ рд╣реИред рдкрд╣рд▓реЗ рдСрдл рдХрд░реЗрдВред', threadID);
                    return;
                }

                api.setTitle(groupName, threadID, (err) => {
                    if (err) {
                        api.sendMessage('тЪая╕П рдЧреНрд░реБрдк рдирд╛рдо рдмрджрд▓рдиреЗ рдореЗрдВ рдЧрд▓рддреАред', threadID);
                        return;
                    }

                    botState.lockedGroups[threadID] = {
                        name: groupName,
                        interval: setInterval(() => {
                            api.setTitle(groupName, threadID, (err) => {
                                if (err) {
                                    console.error('[ERROR] Group name lock interval error:', err.message);
                                }
                            });
                        }, 30000) // рд╣рд░ 30 рд╕реЗрдХрдВрдб рдореЗрдВ рдирд╛рдо рдмрджрд▓рддрд╛ рд░рд╣реЗрдЧрд╛
                    };

                    api.sendMessage(`ЁЯФТ рдЧреНрд░реБрдк рдирд╛рдо рд▓реЙрдХ рдЪрд╛рд▓реВ: "${groupName}"ред рд╣рд░ 30 рд╕реЗрдХрдВрдб рдореЗрдВ рдирд╛рдо рдмрджрд▓рддрд╛ рд░рд╣реЗрдЧрд╛ред`, threadID);
                    console.log(`[DEBUG] Group name lock enabled for thread ${threadID} with name "${groupName}"`);
                });
            });
        } catch (e) {
            console.error('[ERROR] handleGroupNameLock error:', e.message);
            api.sendMessage('тЪая╕П рдЧреНрд░реБрдк рдирд╛рдо рд▓реЙрдХ рдХрдорд╛рдВрдб рдореЗрдВ рдЧрд▓рддреАред рдХреГрдкрдпрд╛ рдлрд┐рд░ рд╕реЗ рдЯреНрд░рд╛рдИ рдХрд░реЗрдВред', threadID);
        }
    }
};
