const messageStore = require('../../utils/messageStore');

module.exports = {
  name: "unsend",
  execute(api, threadID, args, event, botState, isMaster, botID) {
    console.log(`[DEBUG] unsend called: threadID=${threadID}, senderID=${event.senderID}, botID=${botID}, hasReply=${!!event.messageReply}, replyMessageID=${event.messageReply?.messageID}`);
    try {
      // Check if sender is master or admin
      if (!isMaster && !botState.adminList.includes(event.senderID)) {
        console.log(`[DEBUG] Sender ${event.senderID} is not master or admin`);
        api.sendMessage('üö´ ‡§ï‡•á‡§µ‡§≤ ‡§Æ‡§æ‡§∏‡•ç‡§ü‡§∞ ‡§Ø‡§æ ‡§è‡§°‡§Æ‡§ø‡§® ‡§á‡§∏ ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§ï‡•ã ‡§Ø‡•Ç‡§ú ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§', threadID);
        return;
      }

      // Confirm botID is valid
      if (!botID) {
        console.error('[ERROR] Bot ID not found');
        api.sendMessage('‚ö†Ô∏è ‡§¨‡•â‡§ü ID ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§¨‡•â‡§ü ‡§ï‡•ã ‡§∞‡•Ä‡§∏‡•ç‡§ü‡§æ‡§∞‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç‡•§', threadID);
        return;
      }

      // Check if bot has admin permissions
      api.getThreadInfo(threadID, (err, info) => {
        if (err) {
          console.error('[ERROR] Failed to fetch thread info:', err.message);
          api.sendMessage('‚ö†Ô∏è ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§≤‡§æ‡§®‡•á ‡§Æ‡•á‡§Ç ‡§ó‡§≤‡§§‡•Ä‡•§', threadID);
          return;
        }

        // Robust admin check using Array.isArray
        const isBotAdmin = Array.isArray(info.adminIDs) && info.adminIDs.some(admin => admin.id === botID);
        if (!isBotAdmin) {
          console.log(`[DEBUG] Bot (ID: ${botID}) is not admin in thread ${threadID}`);
          api.sendMessage('‡§Æ‡§æ‡§≤‡§ø‡§ï, ‡§Æ‡•Å‡§ù‡•á ‡§è‡§°‡§Æ‡§ø‡§® ‡§¨‡§®‡§æ‡§ì ‡§§‡§æ‡§ï‡§ø ‡§Æ‡•à‡§Ç ‡§Æ‡•à‡§∏‡•á‡§ú ‡§°‡§ø‡§≤‡•Ä‡§ü ‡§ï‡§∞ ‡§∏‡§ï‡•Ç‡§Ç! üôè', threadID);
          return;
        }

        let targetMessage;
        // Check if command is replying to a bot message
        if (event.messageReply && event.messageReply.senderID === botID) {
          targetMessage = messageStore.getBotMessageByReply(event.messageReply.messageID);
          console.log(`[DEBUG] Reply message check: targetMessage=${JSON.stringify(targetMessage)}`);
          if (!targetMessage) {
            targetMessage = messageStore.botMessages.find(msg => msg.messageID === event.messageReply.messageID);
            console.log(`[DEBUG] Fallback reply message check: targetMessage=${JSON.stringify(targetMessage)}`);
          }
        }

        // Fallback to last bot message if no reply or invalid reply
        if (!targetMessage) {
          targetMessage = messageStore.getLastBotMessage(threadID);
          console.log(`[DEBUG] Last bot message check: targetMessage=${JSON.stringify(targetMessage)}`);
        }

        if (!targetMessage) {
          console.log(`[DEBUG] No bot message found for threadID=${threadID}`);
          api.sendMessage('‚ùå ‡§ï‡•ã‡§à ‡§π‡§æ‡§≤ ‡§ï‡§æ ‡§¨‡•â‡§ü ‡§Æ‡•à‡§∏‡•á‡§ú ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ‡•§', threadID);
          return;
        }

        api.unsendMessage(targetMessage.messageID, (err) => {
          if (err) {
            console.error('[ERROR] Unsend failed:', err.message);
            api.sendMessage(`‚ùå ‡§Æ‡•à‡§∏‡•á‡§ú ‡§°‡§ø‡§≤‡•Ä‡§ü ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§ó‡§≤‡§§‡•Ä: ${err.message} (‡§∂‡§æ‡§Ø‡§¶ 10 ‡§Æ‡§ø‡§®‡§ü ‡§∏‡•á ‡§™‡•Å‡§∞‡§æ‡§®‡§æ ‡§π‡•à)‡•§`, threadID);
            return;
          }
          api.sendMessage(`‡§Æ‡§æ‡§≤‡§ø‡§ï, ‡§Æ‡•à‡§Ç‡§®‡•á ‡§Æ‡•à‡§∏‡•á‡§ú ‡§°‡§ø‡§≤‡•Ä‡§ü ‡§ï‡§∞ ‡§¶‡§ø‡§Ø‡§æ: "${targetMessage.content.slice(0, 50)}..." üôè`, threadID);
          // Remove from store
          messageStore.botMessages = messageStore.botMessages.filter(msg => msg.messageID !== targetMessage.messageID);
          console.log(`[DEBUG] Removed message from store: messageID=${targetMessage.messageID}`);
        });
      });
    } catch (e) {
      console.error('[ERROR] unsend error:', e.message);
      api.sendMessage('‚ö†Ô∏è ‡§Ö‡§®‡§∏‡•á‡§Ç‡§° ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§Æ‡•á‡§Ç ‡§ó‡§≤‡§§‡•Ä‡•§', threadID);
    }
  }
};
