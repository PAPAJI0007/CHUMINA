module.exports = {
  name: 'unsend',
  description: 'Delete a replied-to bot message or the last 3 bot messages if no reply',
  execute(api, threadID, args, event, botState, isMaster, botID, stopBot) {
    const messageStore = require('../../utils/messageStore'); // Import store

    // Check if bot is admin in the group
    api.getThreadInfo(threadID, (err, info) => {
      if (err) {
        console.error('[ERROR] Failed to fetch thread info:', err?.message || 'Unknown error', 'Error details:', JSON.stringify(err));
        api.sendMessage('‚ö†Ô∏è ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§≤‡§æ‡§®‡•á ‡§Æ‡•á‡§Ç ‡§ó‡§≤‡§§‡•Ä‡•§ üïâÔ∏è', threadID);
        return;
      }

      console.log('[DEBUG] Thread info admins:', JSON.stringify(info.adminIDs), 'botID:', botID);
      const isBotAdmin = Array.isArray(info.adminIDs) && info.adminIDs.some(admin => admin.id === botID);
      if (!isBotAdmin) {
        api.sendMessage('üö´ ‡§Æ‡•Å‡§ù‡•á ‡§è‡§°‡§Æ‡§ø‡§® ‡§¨‡§®‡§æ‡§ì ‡§§‡§æ‡§ï‡§ø ‡§Æ‡•à‡§Ç ‡§Æ‡•à‡§∏‡•á‡§ú ‡§°‡§ø‡§≤‡•Ä‡§ü ‡§ï‡§∞ ‡§∏‡§ï‡•Ç‡§Ç! üôè', threadID);
        return;
      }

      // Case 1: If command is replied to a message, delete that specific message
      if (event.messageReply && event.messageReply.messageID) {
        console.log('[DEBUG] Reply event detected:', JSON.stringify(event.messageReply));
        const messageIDToDelete = event.messageReply.messageID;

        // Check if the message is from the bot
        const storedMessage = messageStore.getMessage(messageIDToDelete);
        if (!storedMessage || storedMessage.senderID !== botID) {
          console.log(`[DEBUG] Message ${messageIDToDelete} not found in store or not a bot message`);
          api.sendMessage('‚ùå ‡§∏‡§ø‡§∞‡•ç‡§´ ‡§Æ‡•á‡§∞‡•á ‡§Æ‡•à‡§∏‡•á‡§ú ‡§°‡§ø‡§≤‡•Ä‡§ü ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Å! üïâÔ∏è', threadID);
          return;
        }

        // Try deleteMessage with timeout
        console.log(`[DEBUG] Attempting to delete replied messageID: ${messageIDToDelete}`);
        let timeoutTriggered = false;
        const timeoutId = setTimeout(() => {
          timeoutTriggered = true;
          console.error(`[ERROR] Timeout: No response from deleteMessage for ${messageIDToDelete}`);
          api.sendMessage('‚ùå ‡§Æ‡•à‡§∏‡•á‡§ú ‡§°‡§ø‡§≤‡•Ä‡§ü ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§ü‡§æ‡§á‡§Æ‡§Ü‡§â‡§ü‡•§ FB API ‡§á‡§∂‡•ç‡§Ø‡•Ç ‡§π‡•ã ‡§∏‡§ï‡§§‡§æ ‡§π‡•à‡•§ üïâÔ∏è', threadID);
        }, 5000);

        api.deleteMessage(messageIDToDelete, (err) => {
          clearTimeout(timeoutId); // Clear timeout on response
          if (timeoutTriggered) return; // Skip if timeout already handled

          if (err) {
            console.error('[ERROR] Failed to delete replied message:', err?.message || 'Unknown error', 'Error details:', JSON.stringify(err));
            // Fallback to unsendMessage
            console.log(`[DEBUG] Falling back to unsendMessage for ${messageIDToDelete}`);
            api.unsendMessage(messageIDToDelete, (fallbackErr) => {
              if (fallbackErr) {
                console.error('[ERROR] Fallback unsendMessage failed:', fallbackErr?.message || 'Unknown error');
                api.sendMessage(`‚ùå ‡§∞‡§ø‡§™‡•ç‡§≤‡§æ‡§à ‡§Æ‡•à‡§∏‡•á‡§ú ‡§°‡§ø‡§≤‡•Ä‡§ü ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§ó‡§≤‡§§‡•Ä: ${fallbackErr?.message || '‡§Ö‡§ú‡•ç‡§û‡§æ‡§§ ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø'} (FB API ‡§á‡§∂‡•ç‡§Ø‡•Ç ‡§Ø‡§æ ‡§∞‡•á‡§ü ‡§≤‡§ø‡§Æ‡§ø‡§ü) üïâÔ∏è`, threadID);
                return;
              }
              console.log(`[DEBUG] Successfully unsent replied messageID: ${messageIDToDelete} via fallback`);
              messageStore.removeMessage(messageIDToDelete);
              api.sendMessage('‚úÖ ‡§∞‡§ø‡§™‡•ç‡§≤‡§æ‡§à ‡§µ‡§æ‡§≤‡§æ ‡§Æ‡•à‡§∏‡•á‡§ú ‡§°‡§ø‡§≤‡•Ä‡§ü ‡§ï‡§∞ ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ (‡§´‡•â‡§≤ ‡§¨‡•à‡§ï)! üïâÔ∏è', threadID);
            });
            return;
          }
          console.log(`[DEBUG] Successfully deleted replied messageID: ${messageIDToDelete}`);
          messageStore.removeMessage(messageIDToDelete);
          api.sendMessage('‚úÖ ‡§∞‡§ø‡§™‡•ç‡§≤‡§æ‡§à ‡§µ‡§æ‡§≤‡§æ ‡§Æ‡•à‡§∏‡•á‡§ú ‡§°‡§ø‡§≤‡•Ä‡§ü ‡§ï‡§∞ ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ! üïâÔ∏è', threadID);
        });
        return;
      }

      // Case 2: No reply, delete last 3 bot messages from store
      console.log('[DEBUG] No reply found, proceeding to delete bot messages from store');
      const botMessages = messageStore.getLastBotMessages(threadID, 3);

      if (botMessages.length === 0) {
        console.log('[DEBUG] No bot messages found in store for threadID:', threadID);
        api.sendMessage('‚ùå ‡§ï‡•ã‡§à ‡§¨‡•â‡§ü ‡§Æ‡•à‡§∏‡•á‡§ú ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ ‡§°‡§ø‡§≤‡•Ä‡§ü ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è‡•§ üïâÔ∏è', threadID);
        return;
      }

      console.log('[DEBUG] Bot messages to delete from store:', JSON.stringify(botMessages.map(msg => msg.messageID)));
      api.sendMessage(`‚úÖ ‡§≤‡§æ‡§∏‡•ç‡§ü ${botMessages.length} ‡§¨‡•â‡§ü ‡§Æ‡•à‡§∏‡•á‡§ú ‡§°‡§ø‡§≤‡•Ä‡§ü ‡§ï‡§∞ ‡§∞‡§π‡§æ ‡§π‡•Ç‡§Å... (1-2 sec wait ‡§ï‡§∞‡•ã, FB delay ‡§π‡•ã ‡§∏‡§ï‡§§‡§æ ‡§π‡•à) üïâÔ∏è`, threadID);

      let successCount = 0;
      let errorCount = 0;
      let totalCount = botMessages.length;

      botMessages.forEach((msg, index) => {
        const delay = (Math.random() * 1000) + 2000; // 2-3 sec random delay
        setTimeout(() => {
          console.log(`[DEBUG] Attempting to delete bot messageID: ${msg.messageID}`);
          let msgTimeoutTriggered = false;
          const msgTimeoutId = setTimeout(() => {
            msgTimeoutTriggered = true;
            console.error(`[ERROR] Timeout: No response from deleteMessage for ${msg.messageID}`);
            errorCount++;
          }, 5000);

          api.deleteMessage(msg.messageID, (err) => {
            clearTimeout(msgTimeoutId);
            if (msgTimeoutTriggered) return;

            if (err) {
              console.error(`[ERROR] Failed to delete bot message ${msg.messageID}:`, err?.message || 'Unknown error', 'Details:', JSON.stringify(err));
              // Fallback to unsendMessage
              api.unsendMessage(msg.messageID, (fallbackErr) => {
                if (fallbackErr) {
                  console.error(`[ERROR] Fallback unsendMessage failed for ${msg.messageID}:`, fallbackErr?.message || 'Unknown error');
                  errorCount++;
                  return;
                }
                successCount++;
                console.log(`[DEBUG] Successfully unsent bot messageID: ${msg.messageID} via fallback`);
                messageStore.removeBotMessage(msg.messageID);
              });
              return;
            }
            successCount++;
            console.log(`[DEBUG] Successfully deleted bot messageID: ${msg.messageID}`);
            messageStore.removeBotMessage(msg.messageID);
          });

          // Check if last one
          if (index === totalCount - 1) {
            setTimeout(() => {
              const totalDeleted = successCount;
              api.sendMessage(`‚úÖ ‡§ï‡•Å‡§≤ ${totalDeleted}/${totalCount} ‡§¨‡•â‡§ü ‡§Æ‡•à‡§∏‡•á‡§ú ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§°‡§ø‡§≤‡•Ä‡§ü ‡§π‡•ã ‡§ó‡§è! (‡§è‡§∞‡§∞: ${errorCount}) üïâÔ∏è\n‡§®‡•ã‡§ü: FB ‡§Æ‡•á‡§Ç 1-5 sec delay ‡§π‡•ã ‡§∏‡§ï‡§§‡§æ ‡§π‡•à, group refresh ‡§ï‡§∞‡•ã‡•§`, threadID);
              if (errorCount > 0) {
                api.sendMessage(`‚ö†Ô∏è ${errorCount} ‡§Æ‡•à‡§∏‡•á‡§ú ‡§°‡§ø‡§≤‡•Ä‡§ü ‡§®‡§π‡•Ä‡§Ç ‡§π‡•Å‡§è (FB API ‡§á‡§∂‡•ç‡§Ø‡•Ç ‡§Ø‡§æ ‡§∞‡•á‡§ü ‡§≤‡§ø‡§Æ‡§ø‡§ü)‡•§`, threadID);
              }
            }, 3000);
          }
        }, index * delay);
      });
    });
  }
};
