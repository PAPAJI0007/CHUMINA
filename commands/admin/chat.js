module.exports = {
  name: 'chat',
  description: 'Toggle chat mode on or off (admin only)',
  aliases: ['chaton', 'chatoff'],
  execute: async (api, threadID, args, event, botState, isMaster) => {
    console.log('Chat command - SenderID:', event.senderID, 'isMaster:', isMaster, 'AdminList:', botState.adminList, 'Args:', args);

    if (!botState.adminList.includes(event.senderID) && !isMaster) {
      api.sendMessage('üö´ ‡§Ø‡•á ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§∏‡§ø‡§∞‡•ç‡§´ ‡§è‡§°‡§Æ‡§ø‡§®‡•ç‡§∏ ‡§Ø‡§æ ‡§Æ‡§æ‡§∏‡•ç‡§ü‡§∞ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§π‡•à!', threadID);
      return;
    }

    const command = args[1] ? args[1].toLowerCase() : args[0].toLowerCase().replace(/^#/, '');
    let chatState = botState.chatEnabled || { [threadID]: false };

    if (command === 'on' || command === 'chaton') {
      if (chatState[threadID]) {
        api.sendMessage('‚úÖ ‡§ö‡•à‡§ü ‡§Æ‡•ã‡§° ‡§™‡§π‡§≤‡•á ‡§∏‡•á ‡§ë‡§® ‡§π‡•à! #ai ‡§Ø‡§æ @ai ‡§Ø‡•Ç‡§ú ‡§ï‡§∞‡•ã‡•§', threadID);
        return;
      }
      chatState[threadID] = true;
      api.sendMessage('‚úÖ ‡§ö‡•à‡§ü ‡§Æ‡•ã‡§° ‡§ë‡§®! ‡§Ö‡§¨ #ai ‡§Ø‡§æ @ai ‡§ï‡•á ‡§∏‡§æ‡§• ‡§¨‡§æ‡§§ ‡§ï‡§∞‡•ã, ‡§ú‡•à‡§∏‡•á: #ai ‡§π‡§æ‡§Ø ‡§≠‡§æ‡§à!', threadID);
    } else if (command === 'off' || command === 'chatoff') {
      if (!chatState[threadID]) {
        api.sendMessage('‚úÖ ‡§ö‡•à‡§ü ‡§Æ‡•ã‡§° ‡§™‡§π‡§≤‡•á ‡§∏‡•á ‡§ë‡§´ ‡§π‡•à!', threadID);
        return;
      }
      chatState[threadID] = false;
      api.sendMessage('‚ùå ‡§ö‡•à‡§ü ‡§Æ‡•ã‡§° ‡§ë‡§´! ‡§Ö‡§¨ ‡§∏‡§ø‡§∞‡•ç‡§´ ‡§ï‡§Æ‡§æ‡§Ç‡§°‡•ç‡§∏ ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡•á‡§Ç‡§ó‡•Ä‡•§', threadID);
    } else {
      api.sendMessage('‚ùì ‡§Ø‡•Ç‡§ú: #chat on ‡§Ø‡§æ #chat off (‡§Ø‡§æ #chaton, #chatoff)', threadID);
      return;
    }

    botState.chatEnabled = chatState;
    console.log('Chat state updated:', botState.chatEnabled);

    try {
      const fs = require('fs');
      const { LEARNED_RESPONSES_PATH } = require('../../config/constants');
      botState.learnedResponses.chatEnabled = chatState;
      botState.learnedResponses.adminList = botState.adminList;
      fs.writeFileSync(LEARNED_RESPONSES_PATH, JSON.stringify(botState.learnedResponses, null, 2), 'utf8');
      console.log('Chat state and adminList saved to learned_responses.json');
    } catch (err) {
      console.error('Error saving to learned_responses.json:', err.message);
      api.sendMessage('‚ö†Ô∏è ‡§ö‡•à‡§ü ‡§∏‡•ç‡§ü‡•á‡§ü ‡§∏‡•á‡§µ ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§ó‡§°‡§º‡§¨‡§°‡§º!', threadID);
    }
  }
};
