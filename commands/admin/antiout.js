// commands/admin/antiout.js
module.exports = {
  name: "antiout",
  execute(api, threadID, args, event, botState, isMaster) {
    try {
      if (!isMaster && !botState.adminList.includes(event.senderID)) {
        api.sendMessage('üö´ ‡§ï‡•á‡§µ‡§≤ ‡§Æ‡§æ‡§∏‡•ç‡§ü‡§∞ ‡§Ø‡§æ ‡§è‡§°‡§Æ‡§ø‡§® ‡§á‡§∏ ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§ï‡•ã ‡§Ø‡•Ç‡§ú ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§', threadID);
        return;
      }

      const botConfig = botState.sessions[event.senderID]?.botConfig || { antiOut: false };
      if (args[1] === 'on') {
        botConfig.antiOut = true;
        botState.sessions[event.senderID].botConfig = botConfig;
        api.sendMessage('üõ°Ô∏è Anti-out ‡§∏‡§ø‡§∏‡•ç‡§ü‡§Æ ‡§ö‡§æ‡§≤‡•Ç! ‡§Ö‡§¨ ‡§Æ‡•á‡§Ç‡§¨‡§∞‡•ç‡§∏ ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§õ‡•ã‡§°‡§º ‡§®‡§π‡•Ä‡§Ç ‡§∏‡§ï‡§§‡•á!', threadID);
      } else if (args[1] === 'off') {
        botConfig.antiOut = false;
        botState.sessions[event.senderID].botConfig = botConfig;
        api.sendMessage('üõ°Ô∏è Anti-out ‡§∏‡§ø‡§∏‡•ç‡§ü‡§Æ ‡§¨‡§Ç‡§¶!', threadID);
      } else {
        api.sendMessage(`‡§â‡§™‡§Ø‡•ã‡§ó: ${botState.sessions[event.senderID]?.prefix || '#'}antiout on/off`, threadID);
      }
    } catch (e) {
      console.error('[ERROR] antiout error:', e.message);
      api.sendMessage('‚ö†Ô∏è Antiout ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§Æ‡•á‡§Ç ‡§ó‡§≤‡§§‡•Ä‡•§', threadID);
    }
  }
};
