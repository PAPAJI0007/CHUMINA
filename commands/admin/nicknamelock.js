module.exports = {
  name: 'nicknamelock',
  aliases: ['nicklock'],
  description: 'рд▓реЙрдХ рдпрд╛ рдЕрдирд▓реЙрдХ рдХрд░рддрд╛ рд╣реИ рдЧреНрд░реБрдк рдореЗрдВ рдирд┐рдХрдиреЗрдореНрд╕ рдХреЛред',
  execute(api, threadID, args, event, botState, isMaster) {
    const isAdmin = botState.adminList.includes(event.senderID) || isMaster;

    if (!isAdmin) {
      api.sendMessage('ЁЯЪл рдпреЗ рдХрдорд╛рдВрдб рд╕рд┐рд░реНрдл рдПрдбрдорд┐рдиреНрд╕ рдпрд╛ рдорд╛рд╕реНрдЯрд░ рдХреЗ рд▓рд┐рдП рд╣реИ!', threadID);
      return;
    }

    if (args.length < 1) {
      api.sendMessage('рдЙрдкрдпреЛрдЧ: #nicknamelock on <nickname> рдпрд╛ #nicknamelock on @user <nickname> рдпрд╛ #nicknamelock off рдпрд╛ #nicknamelock @user off', threadID);
      return;
    }

    const command = args[0].toLowerCase();

    if (command === 'on') {
      if (args[1] && args[1].startsWith('@')) {
        // Specific user nickname lock
        const userID = Object.keys(event.mentions)[0];
        if (!userID) {
          api.sendMessage('тЪая╕П рдХреГрдкрдпрд╛ рдПрдХ рд╡реИрд▓рд┐рдб рдпреВрдЬрд░ рдХреЛ рдореЗрдВрд╢рди рдХрд░реЗрдВред', threadID);
          return;
        }

        // Extract nickname by joining all args after @user
        let nickname = args.slice(2).join(' ').trim();
        // Remove surrounding brackets if present
        if (nickname.startsWith('(') && nickname.endsWith(')')) {
          nickname = nickname.slice(1, -1).trim();
        }
        // Allow Hindi and other Unicode characters, but ensure it's not empty
        if (!nickname || nickname.length === 0) {
          api.sendMessage('тЪая╕П рдХреГрдкрдпрд╛ рдПрдХ рд╡реИрд▓рд┐рдб рдирд┐рдХрдиреЗрдо рдкреНрд░реЛрд╡рд╛рдЗрдб рдХрд░реЗрдВред', threadID);
          return;
        }

        api.getUserInfo(userID, (err, ret) => {
          if (err || !ret || !ret[userID] || !ret[userID].name) {
            api.sendMessage('тЪая╕П рдпреВрдЬрд░ рдЬрд╛рдирдХрд╛рд░реА рд▓рд╛рдиреЗ рдореЗрдВ рдЕрд╕рдлрд▓ред', threadID);
            return;
          }

          const name = ret[userID].name || 'User';
          if (!botState.lockedNicknames[threadID]) {
            botState.lockedNicknames[threadID] = {};
          }
          botState.lockedNicknames[threadID][userID] = nickname;

          api.changeNickname(nickname, threadID, userID, (err) => {
            if (err) {
              api.sendMessage('тЪая╕П рдирд┐рдХрдиреЗрдо рд▓реЙрдХ рдХрд░рдиреЗ рдореЗрдВ рдЕрд╕рдлрд▓ред', threadID);
            } else {
              api.sendMessage(`тЬЕ ${name} (${userID}) рдХрд╛ рдирд┐рдХрдиреЗрдо "${nickname}" рдкреЗ рд▓реЙрдХ рдХрд░ рджрд┐рдпрд╛ рдЧрдпрд╛!`, threadID);
            }
          });
        });
      } else {
        // Group-wide nickname lock
        let nickname = args.slice(1).join(' ').trim();
        // Remove surrounding brackets if present
        if (nickname.startsWith('(') && nickname.endsWith(')')) {
          nickname = nickname.slice(1, -1).trim();
        }
        // Allow Hindi and other Unicode characters, but ensure it's not empty
        if (!nickname || nickname.length === 0) {
          api.sendMessage('тЪая╕П рдХреГрдкрдпрд╛ рдПрдХ рд╡реИрд▓рд┐рдб рдирд┐рдХрдиреЗрдо рдкреНрд░реЛрд╡рд╛рдЗрдб рдХрд░реЗрдВред', threadID);
          return;
        }

        if (!botState.nicknameQueues[threadID]) {
          botState.nicknameQueues[threadID] = {
            active: false,
            nickname: '',
            changedUsers: new Set(),
            interval: 30000,
            botUserId: botState.sessions[event.senderID]?.botID || event.senderID
          };
        }

        botState.nicknameQueues[threadID].active = true;
        botState.nicknameQueues[threadID].nickname = nickname;

        api.sendMessage(`ЁЯФТ рдирд┐рдХрдиреЗрдо рд▓реЙрдХ рдЪрд╛рд▓реВ: "${nickname}"ред рдЕрдм 30 рд╕реЗрдХрдВрдб рдореЗрдВ рдирд┐рдХрдиреЗрдо рдЪреЗрдВрдЬ рд╣реЛрдВрдЧреЗред`, threadID);

        api.getThreadInfo(threadID, (err, info) => {
          if (err || !info || !info.participantIDs) {
            api.sendMessage('тЪая╕П рдЧреНрд░реБрдк рдореЗрдВрдмрд░реНрд╕ рдХреА рдЬрд╛рдирдХрд╛рд░реА рд▓рд╛рдиреЗ рдореЗрдВ рдЕрд╕рдлрд▓ред', threadID);
            return;
          }

          const members = info.participantIDs.filter(id => id !== botState.sessions[event.senderID]?.botID);
          members.forEach((memberID, index) => {
            setTimeout(() => {
              if (botState.nicknameQueues[threadID]?.active) {
                api.changeNickname(nickname, threadID, memberID, (err) => {
                  if (!err) {
                    botState.nicknameQueues[threadID].changedUsers.add(memberID);
                  }
                });
              }
            }, index * 1000);
          });
        });
      }
    } else if (command === 'off') {
      if (args[1] && args[1].startsWith('@')) {
        // Specific user nickname unlock
        const userID = Object.keys(event.mentions)[0];
        if (!userID) {
          api.sendMessage('тЪая╕П рдХреГрдкрдпрд╛ рдПрдХ рд╡реИрд▓рд┐рдб рдпреВрдЬрд░ рдХреЛ рдореЗрдВрд╢рди рдХрд░реЗрдВред', threadID);
          return;
        }

        if (!botState.lockedNicknames[threadID]?.[userID]) {
          api.sendMessage('тЪая╕П рдЗрд╕ рдпреВрдЬрд░ рдХрд╛ рдирд┐рдХрдиреЗрдо рд▓реЙрдХ рдирд╣реАрдВ рд╣реИред', threadID);
          return;
        }

        api.getUserInfo(userID, (err, ret) => {
          if (err || !ret || !ret[userID] || !ret[userID].name) {
            api.sendMessage('тЪая╕П рдпреВрдЬрд░ рдЬрд╛рдирдХрд╛рд░реА рд▓рд╛рдиреЗ рдореЗрдВ рдЕрд╕рдлрд▓ред', threadID);
            return;
          }

          const name = ret[userID].name || 'User';
          delete botState.lockedNicknames[threadID][userID];

          // Remove nickname to revert to default
          api.changeNickname('', threadID, userID, (err) => {
            if (err) {
              api.sendMessage('тЪая╕П рдирд┐рдХрдиреЗрдо рд╣рдЯрд╛рдиреЗ рдореЗрдВ рдЕрд╕рдлрд▓ред', threadID);
            } else {
              api.sendMessage(`тЬЕ ${name} (${userID}) рдХрд╛ рдирд┐рдХрдиреЗрдо рд▓реЙрдХ рд╣рдЯрд╛ рджрд┐рдпрд╛ рдЧрдпрд╛!`, threadID);
            }
          });
        });
      } else {
        // Group-wide nickname unlock
        if (!botState.nicknameQueues[threadID]?.active) {
          api.sendMessage('тЪая╕П рдирд┐рдХрдиреЗрдо рд▓реЙрдХ рдкрд╣рд▓реЗ рд╕реЗ рдмрдВрдж рд╣реИред', threadID);
          return;
        }

        botState.nicknameQueues[threadID].active = false;
        if (botState.nicknameTimers[threadID]) {
          clearTimeout(botState.nicknameTimers[threadID]);
          delete botState.nicknameTimers[threadID];
        }
        api.sendMessage('ЁЯФУ рдирд┐рдХрдиреЗрдо рд▓реЙрдХ рдмрдВрдж рд╣реЛ рдЧрдпрд╛ред', threadID);
      }
    } else {
      api.sendMessage('рдЙрдкрдпреЛрдЧ: #nicknamelock on <nickname> рдпрд╛ #nicknamelock on @user <nickname> рдпрд╛ #nicknamelock off рдпрд╛ #nicknamelock @user off', threadID);
    }
  }
};
