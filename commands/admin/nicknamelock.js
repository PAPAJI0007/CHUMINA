module.exports = {
    handleNicknameLock: (api, threadID, args, event, botState, isMaster) => {
        console.log(`[DEBUG] handleNicknameLock called: threadID=${threadID}, args=${JSON.stringify(args)}, isMaster=${isMaster}`);
        try {
            if (!isMaster && !botState.adminList.includes(event.senderID)) {
                api.sendMessage('üö´ ‡§ï‡•á‡§µ‡§≤ ‡§Æ‡§æ‡§∏‡•ç‡§ü‡§∞ ‡§Ø‡§æ ‡§è‡§°‡§Æ‡§ø‡§® ‡§á‡§∏ ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§ï‡•ã ‡§Ø‡•Ç‡§ú ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§', threadID);
                return;
            }

            if (args[1] === 'off') {
                if (botState.nicknameTimers[threadID]) {
                    clearTimeout(botState.nicknameTimers[threadID]);
                    delete botState.nicknameTimers[threadID];
                    delete botState.nicknameQueues[threadID];
                    api.sendMessage('üîì ‡§®‡§ø‡§ï‡§®‡•á‡§Æ ‡§≤‡•â‡§ï ‡§¨‡§Ç‡§¶ ‡§ï‡§∞ ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ‡•§', threadID);
                    console.log(`[DEBUG] Nickname lock stopped for thread ${threadID}`);
                } else {
                    api.sendMessage('‚ö†Ô∏è ‡§®‡§ø‡§ï‡§®‡•á‡§Æ ‡§≤‡•â‡§ï ‡§™‡§π‡§≤‡•á ‡§∏‡•á ‡§¨‡§Ç‡§¶ ‡§π‡•à‡•§', threadID);
                }
                return;
            }

            if (args[1] !== 'on' || !args[2] || isNaN(args[2]) || parseInt(args[2]) < 1 || !args[3]) {
                api.sendMessage('‚ùå ‡§∏‡§π‡•Ä ‡§´‡•â‡§∞‡•ç‡§Æ‡•á‡§ü: #nicknamelock on <time_in_seconds> <nickname> ‡§Ø‡§æ #nicknamelock off', threadID);
                return;
            }

            const time = parseInt(args[2]) * 1000;
            const nickname = args.slice(3).join(' ');

            api.getThreadInfo(threadID, (err, info) => {
                if (err || !info) {
                    api.sendMessage('‚ö†Ô∏è ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§≤‡§æ‡§®‡•á ‡§Æ‡•á‡§Ç ‡§Ö‡§∏‡§´‡§≤‡•§', threadID);
                    return;
                }

                const botID = api.getCurrentUserID();
                const isBotAdmin = info.adminIDs.some(admin => admin.id === botID);
                if (!isBotAdmin) {
                    api.sendMessage('‚ö†Ô∏è ‡§®‡§ø‡§ï‡§®‡•á‡§Æ ‡§≤‡•â‡§ï ‡§ï‡•á ‡§≤‡§ø‡§è ‡§¨‡•â‡§ü ‡§ï‡•ã ‡§è‡§°‡§Æ‡§ø‡§® ‡§™‡§∞‡§Æ‡§ø‡§∂‡§®‡•ç‡§∏ ‡§ö‡§æ‡§π‡§ø‡§è‡•§', threadID);
                    return;
                }

                const members = info.participantIDs.filter(id => id !== botID);
                if (members.length === 0) {
                    api.sendMessage('‚ö†Ô∏è ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§Æ‡•á‡§Ç ‡§ï‡•ã‡§à ‡§Æ‡•á‡§Ç‡§¨‡§∞‡•ç‡§∏ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡§Ç‡•§', threadID);
                    return;
                }

                botState.nicknameQueues[threadID] = { members, currentIndex: 0, nickname, botUserId: event.senderID, active: true, interval: time };
                api.sendMessage(`üîí ‡§®‡§ø‡§ï‡§®‡•á‡§Æ ‡§≤‡•â‡§ï ‡§ö‡§æ‡§≤‡•Ç: "${nickname}"‡•§ ‡§π‡§∞ ${args[2]} ‡§∏‡•á‡§ï‡§Ç‡§° ‡§Æ‡•á‡§Ç ‡§Æ‡•á‡§Ç‡§¨‡§∞‡•ç‡§∏ ‡§ï‡•á ‡§®‡§ø‡§ï‡§®‡•á‡§Æ ‡§¨‡§¶‡§≤‡§§‡•á ‡§∞‡§π‡•á‡§Ç‡§ó‡•á‡•§`, threadID);
                processNicknameChange(api, { threadID, logMessageType: 'log:user-nickname' }, botState, threadID, botID); // Start the loop
            });
        } catch (e) {
            console.error('[ERROR] handleNicknameLock error:', e.message);
            api.sendMessage('‚ö†Ô∏è ‡§®‡§ø‡§ï‡§®‡•á‡§Æ ‡§≤‡•â‡§ï ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§Æ‡•á‡§Ç ‡§ó‡§≤‡§§‡•Ä‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§´‡§ø‡§∞ ‡§∏‡•á ‡§ü‡•ç‡§∞‡§æ‡§à ‡§ï‡§∞‡•á‡§Ç‡•§', threadID);
        }
    }
};
                const tryFetchThreadInfo = (attempt = 1, maxAttempts = 5) => {
                    api.getThreadInfo(threadID, (err, info) => {
                        if (err || !info || !info.participantIDs || info.participantIDs.length === 0) {
                            console.error(`[ERROR] getThreadInfo failed for thread ${threadID} (attempt ${attempt}):`, err?.message || 'No participantIDs');
                            if (attempt < maxAttempts) {
                                const delay = Math.pow(2, attempt) * 5000; // Exponential backoff
                                console.log(`Retrying getThreadInfo for thread ${threadID} in ${delay / 1000} seconds (attempt ${attempt + 1})`);
                                setTimeout(() => tryFetchThreadInfo(attempt + 1, maxAttempts), delay);
                            } else {
                                console.log(`[DEBUG] Falling back to memberCache for thread ${threadID}`);
                                const members = botState.memberCache[threadID] ? Array.from(botState.memberCache[threadID]) : [];
                                if (members.length === 0) {
                                    console.log(`[DEBUG] No members in memberCache for thread ${threadID}`);
                                    api.sendMessage('‚ö†Ô∏è ‡§ï‡•ã‡§à ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§Æ‡•á‡§Ç‡§¨‡§∞‡•ç‡§∏ ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡•á‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§Æ‡•á‡§Ç ‡§ï‡•Å‡§õ ‡§Æ‡•à‡§∏‡•á‡§ú ‡§≠‡•á‡§ú‡•á‡§Ç ‡§§‡§æ‡§ï‡§ø ‡§Æ‡•á‡§Ç‡§¨‡§∞ ‡§≤‡§ø‡§∏‡•ç‡§ü ‡§¨‡§® ‡§∏‡§ï‡•á ‡§Ø‡§æ ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç ‡§ï‡§ø ‡§¨‡•â‡§ü ‡§ï‡•ã ‡§è‡§°‡§Æ‡§ø‡§® ‡§™‡§∞‡§Æ‡§ø‡§∂‡§®‡•ç‡§∏ ‡§π‡•à‡§Ç‡•§', threadID);
                                    return;
                                }
                                initializeNicknameLock(members);
                            }
                            return;
                        }

                        console.log(`[DEBUG] getThreadInfo succeeded for thread ${threadID}, participantIDs: ${info.participantIDs}`);
                        botState.memberCache[threadID] = new Set(info.participantIDs);
                        initializeNicknameLock(info.participantIDs);
                    });
                };

                const initializeNicknameLock = (members) => {
                    const botUserId = api.getCurrentUserID();
                    botState.nicknameQueues[threadID] = {
                        members: members.filter(id => id !== botUserId),
                        currentIndex: 0,
                        nickname,
                        botUserId,
                        active: true,
                        interval: time
                    };
                    console.log(`[DEBUG] Initialized nickname queue for thread ${threadID}:`, JSON.stringify(botState.nicknameQueues[threadID]));

                    if (botState.nicknameQueues[threadID].members.length === 0) {
                        console.error(`[ERROR] No valid members found for nickname lock in thread ${threadID}`);
                        api.sendMessage('‚ö†Ô∏è ‡§®‡§ø‡§ï‡§®‡•á‡§Æ ‡§≤‡•â‡§ï ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡•ã‡§à ‡§µ‡•à‡§≤‡§ø‡§° ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§Æ‡•á‡§Ç‡§¨‡§∞‡•ç‡§∏ ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡•á‡•§', threadID);
                        delete botState.nicknameQueues[threadID];
                        return;
                    }

                    api.sendMessage(`üîí ‡§®‡§ø‡§ï‡§®‡•á‡§Æ ‡§≤‡•â‡§ï ‡§ö‡§æ‡§≤‡•Ç: ‡§®‡§ø‡§ï‡§®‡•á‡§Æ "${nickname}"‡•§ ‡§π‡§∞ ${args[2]} ‡§∏‡•á‡§ï‡§Ç‡§° ‡§Æ‡•á‡§Ç ${botState.nicknameQueues[threadID].members.length} ‡§Æ‡•á‡§Ç‡§¨‡§∞‡•ç‡§∏ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§®‡§ø‡§ï‡§®‡•á‡§Æ ‡§¨‡§¶‡§≤ ‡§∞‡§π‡§æ ‡§π‡•Ç‡§Å‡•§`, threadID);
                    processNicknameChange(api, threadID, botState);
                };

                tryFetchThreadInfo();
            } else if (args[1] && args[1].toLowerCase() === 'off') {
                if (botState.nicknameQueues[threadID]) {
                    clearTimeout(botState.nicknameTimers[threadID]);
                    delete botState.nicknameQueues[threadID];
                    delete botState.nicknameTimers[threadID];
                    console.log(`[DEBUG] Nickname lock disabled for thread ${threadID}`);
                    api.sendMessage('üîì ‡§®‡§ø‡§ï‡§®‡•á‡§Æ ‡§≤‡•â‡§ï ‡§¨‡§Ç‡§¶ ‡§ï‡§∞ ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ‡•§', threadID);
                } else {
                    console.log(`[DEBUG] No active nickname lock for thread ${threadID}`);
                    api.sendMessage('‚ö†Ô∏è ‡§á‡§∏ ‡§•‡•ç‡§∞‡•á‡§° ‡§Æ‡•á‡§Ç ‡§ï‡•ã‡§à ‡§®‡§ø‡§ï‡§®‡•á‡§Æ ‡§≤‡•â‡§ï ‡§ö‡§æ‡§≤‡•Ç ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡•§', threadID);
                }
            } else {
                console.log(`[DEBUG] Invalid nicknamelock command: ${args.join(' ')}`);
                api.sendMessage('‡§â‡§™‡§Ø‡•ã‡§ó: #nicknamelock on <time_in_seconds> <nickname> ‡§Ø‡§æ #nicknamelock off', threadID);
            }
        } catch (e) {
            console.error(`[ERROR] handleNicknameLock error for thread ${threadID}:`, e.message);
            api.sendMessage('‚ö†Ô∏è ‡§®‡§ø‡§ï‡§®‡•á‡§Æ ‡§≤‡•â‡§ï ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§Æ‡•á‡§Ç ‡§ó‡§≤‡§§‡•Ä‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§´‡§ø‡§∞ ‡§∏‡•á ‡§ü‡•ç‡§∞‡§æ‡§à ‡§ï‡§∞‡•á‡§Ç‡•§', threadID);
        }
    }
};
