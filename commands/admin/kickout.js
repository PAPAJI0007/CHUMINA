// commands/admin/kickout.js
const { MASTER_ID } = require('../../config/constants');

module.exports = {
  name: "kickout",
  execute(api, threadID, args, event, botState, isMaster) {
    console.log(`[DEBUG] kickout called: threadID=${threadID}, args=${JSON.stringify(args)}, event.mentions=${JSON.stringify(event.mentions)}`);
    try {
      if (!isMaster && !botState.adminList.includes(event.senderID)) {
        api.sendMessage('üö´ ‡§ï‡•á‡§µ‡§≤ ‡§Æ‡§æ‡§∏‡•ç‡§ü‡§∞ ‡§Ø‡§æ ‡§è‡§°‡§Æ‡§ø‡§® ‡§á‡§∏ ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§ï‡•ã ‡§Ø‡•Ç‡§ú ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§', threadID);
        return;
      }

      if (!event.mentions || Object.keys(event.mentions).length === 0) {
        console.log(`[DEBUG] No mentions provided for kickout in thread ${threadID}`);
        api.sendMessage('‡§â‡§™‡§Ø‡•ã‡§ó: #kickout @user', threadID);
        return;
      }

      const targetID = Object.keys(event.mentions)[0];
      if (targetID === MASTER_ID) {
        console.log(`[DEBUG] Attempted to kick master ${MASTER_ID} in thread ${threadID}`);
        api.sendMessage('üö´ ‡§Æ‡§æ‡§∏‡•ç‡§ü‡§∞ ‡§ï‡•ã ‡§ï‡§ø‡§ï ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ ‡§∏‡§ï‡§§‡§æ!', threadID);
        return;
      }

      api.getThreadInfo(threadID, (err, info) => {
        if (err || !info) {
          console.error(`[ERROR] getThreadInfo failed for thread ${threadID}:`, err?.message || 'No thread info');
          api.sendMessage('‚ö†Ô∏è ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§≤‡§æ‡§®‡•á ‡§Æ‡•á‡§Ç ‡§Ö‡§∏‡§´‡§≤‡•§', threadID);
          return;
        }

        if (!info.adminIDs.some(admin => admin.id === api.getCurrentUserID())) {
          console.log(`[DEBUG] Bot is not admin in thread ${threadID}`);
          api.sendMessage('‚ö†Ô∏è ‡§ï‡§ø‡§ï ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§¨‡•â‡§ü ‡§ï‡•ã ‡§è‡§°‡§Æ‡§ø‡§® ‡§™‡§∞‡§Æ‡§ø‡§∂‡§®‡•ç‡§∏ ‡§ö‡§æ‡§π‡§ø‡§è‡•§', threadID);
          return;
        }

        api.getUserInfo(targetID, (err, ret) => {
          if (err || !ret[targetID]) {
            console.error(`[ERROR] getUserInfo failed for user ${targetID}:`, err?.message || 'No user info');
            api.sendMessage('‚ö†Ô∏è ‡§Ø‡•Ç‡§ú‡§∞ ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§≤‡§æ‡§®‡•á ‡§Æ‡•á‡§Ç ‡§Ö‡§∏‡§´‡§≤‡•§', threadID);
            return;
          }

          const name = ret[targetID].name || 'User';
          api.removeUserFromGroup(targetID, threadID, (err) => {
            if (err) {
              console.error(`[ERROR] Failed to kick user ${targetID} from thread ${threadID}:`, err.message);
              api.sendMessage(`‚ö†Ô∏è ${name} ‡§ï‡•ã ‡§ï‡§ø‡§ï ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§ó‡§≤‡§§‡•Ä‡•§ ‡§¨‡•â‡§ü ‡§ï‡•ã ‡§è‡§°‡§Æ‡§ø‡§® ‡§™‡§∞‡§Æ‡§ø‡§∂‡§®‡•ç‡§∏ ‡§ö‡§æ‡§π‡§ø‡§è‡•§`, threadID);
            } else {
              console.log(`[DEBUG] Successfully kicked user ${targetID} (${name}) from thread ${threadID}`);
              api.sendMessage(`‚úÖ ${name} ‡§ï‡•ã ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§∏‡•á ‡§ï‡§ø‡§ï ‡§ï‡§∞ ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ!`, threadID);
            }
          });
        });
      });
    } catch (e) {
      console.error(`[ERROR] kickout error for thread ${threadID}:`, e.message);
      api.sendMessage('‚ö†Ô∏è ‡§ï‡§ø‡§ï‡§Ü‡§â‡§ü ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§Æ‡•á‡§Ç ‡§ó‡§≤‡§§‡•Ä‡•§', threadID);
    }
  }
};
