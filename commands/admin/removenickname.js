// Updated removenickname.js
module.exports = {
  name: "removenickname",
  execute(api, threadID, args, event, botState, isMaster) {
    const isAdmin = botState.adminList.includes(event.senderID) || isMaster;
    if (!isAdmin) {
      api.sendMessage('üö´ ‡§ï‡•á‡§µ‡§≤ ‡§Æ‡§æ‡§∏‡•ç‡§ü‡§∞ ‡§Ø‡§æ ‡§è‡§°‡§Æ‡§ø‡§® ‡§á‡§∏ ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§ï‡•ã ‡§Ø‡•Ç‡§ú ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§', threadID);
      return;
    }

    if (!botState.removeNicknameActive) botState.removeNicknameActive = {};
    if (!botState.removeNicknameTargets) botState.removeNicknameTargets = {}; // Specific users for remove mode

    try {
      const botID = api.getCurrentUserID();

      // ‡§•‡•ç‡§∞‡•á‡§° ‡§Æ‡•á‡§Ç ‡§ï‡§Æ ‡§∏‡•á ‡§ï‡§Æ ‡§è‡§ï ‡§Æ‡•à‡§∏‡•á‡§ú ‡§≠‡•á‡§ú‡§®‡•á ‡§ï‡§æ ‡§´‡§Ç‡§ï‡•ç‡§∂‡§®
      const ensureThreadHasMessage = (callback) => {
        api.getThreadInfo(threadID, (err, info) => {
          if (err || !info || info.messageCount === 0) {
            console.log(`[DEBUG] Thread ${threadID} has no messages, sending dummy message`);
            api.sendMessage('üîß Initializing nickname change...', threadID, (err) => {
              if (err) {
                console.error(`[ERROR] Failed to send dummy message to thread ${threadID}:`, err.message);
                api.sendMessage('‚ö†Ô∏è ‡§•‡•ç‡§∞‡•á‡§° ‡§Æ‡•á‡§Ç ‡§Æ‡•à‡§∏‡•á‡§ú ‡§≠‡•á‡§ú‡§®‡•á ‡§Æ‡•á‡§Ç ‡§Ö‡§∏‡§´‡§≤‡•§', threadID);
                return;
              }
              setTimeout(callback, 1000); // 1 ‡§∏‡•á‡§ï‡§Ç‡§° ‡§µ‡•á‡§ü ‡§ï‡§∞‡§ï‡•á ‡§ï‡•â‡§≤‡§¨‡•à‡§ï
            });
          } else {
            callback();
          }
        });
      };

      if (args[1] === 'stop') {
        if (botState.removeNicknameActive[threadID]) {
          delete botState.removeNicknameActive[threadID];
          if (botState.removeNicknameTargets[threadID]) {
            delete botState.removeNicknameTargets[threadID];
          }
          api.sendMessage('‚úÖ ‡§®‡§ø‡§ï‡§®‡•á‡§Æ ‡§π‡§ü‡§æ‡§®‡•á ‡§ï‡§æ ‡§Æ‡•ã‡§° ‡§¨‡§Ç‡§¶ ‡§ï‡§∞ ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ!', threadID);
          console.log(`[DEBUG] Remove nickname mode stopped for thread ${threadID}`);
        } else {
          api.sendMessage('‚ö†Ô∏è ‡§®‡§ø‡§ï‡§®‡•á‡§Æ ‡§π‡§ü‡§æ‡§®‡•á ‡§ï‡§æ ‡§Æ‡•ã‡§° ‡§ö‡§æ‡§≤‡•Ç ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡•§', threadID);
        }
        return;
      }

      if (args[1] === '@everyone') {
        // ‡§∏‡§≠‡•Ä ‡§Æ‡•á‡§Ç‡§¨‡§∞‡•ç‡§∏ ‡§ï‡•á ‡§®‡§ø‡§ï‡§®‡•á‡§Æ‡•ç‡§∏ ‡§π‡§ü‡§æ‡§®‡§æ ‡§î‡§∞ ‡§Æ‡•ã‡§° ‡§è‡§ï‡•ç‡§ü‡§ø‡§µ ‡§ï‡§∞‡§®‡§æ
        api.sendMessage('üîß ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§ï‡•á ‡§∏‡§≠‡•Ä ‡§®‡§ø‡§ï‡§®‡•á‡§Æ‡•ç‡§∏ ‡§π‡§ü‡§æ‡§®‡•á ‡§∂‡•Å‡§∞‡•Ç! ‡§ï‡•ã‡§à ‡§®‡§Ø‡§æ ‡§®‡§ø‡§ï‡§®‡•á‡§Æ ‡§°‡§æ‡§≤‡§æ toh bot hata dega.', threadID);
        ensureThreadHasMessage(() => {
          api.getThreadInfo(threadID, (err, info) => {
            if (err || !info) {
              api.sendMessage('‚ùå ‡§•‡•ç‡§∞‡•á‡§° ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§≤‡•á‡§®‡•á ‡§Æ‡•á‡§Ç ‡§Ö‡§∏‡§´‡§≤‡•§', threadID);
              console.error(`[ERROR] getThreadInfo failed for thread ${threadID}:`, err?.message);
              return;
            }

            const participantIDs = info.participantIDs.filter(id => id !== botID);
            let index = 0;
            const interval = setInterval(() => {
              if (index >= participantIDs.length) {
                clearInterval(interval);
                botState.removeNicknameActive[threadID] = true; // ‡§Æ‡•ã‡§° ‡§è‡§ï‡•ç‡§ü‡§ø‡§µ
                api.sendMessage('‚úÖ ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§ï‡•á ‡§∏‡§≠‡•Ä ‡§Æ‡•á‡§Ç‡§¨‡§∞‡•ç‡§∏ ‡§ï‡•á ‡§®‡§ø‡§ï‡§®‡•á‡§Æ‡•ç‡§∏ ‡§π‡§ü‡§æ ‡§¶‡§ø‡§è ‡§ó‡§è! ‡§®‡§Ø‡§æ ‡§®‡§ø‡§ï‡§®‡•á‡§Æ ‡§°‡§æ‡§≤‡§®‡•á ‡§™‡§∞ bot ‡§π‡§ü‡§æ‡§è‡§ó‡§æ (#removenickname stop ‡§∏‡•á ‡§¨‡§Ç‡§¶ ‡§π‡•ã‡§ó‡§æ).', threadID);
                console.log(`[DEBUG] All nicknames removed for thread ${threadID}, mode active`);
                return;
              }

              const userID = participantIDs[index];
              // ‡§≤‡•â‡§ï ‡§π‡§ü‡§æ‡§®‡§æ (‡§Ö‡§ó‡§∞ ‡§π‡•à ‡§§‡•ã)
              if (botState.lockedNicknames[threadID]?.[userID]) {
                delete botState.lockedNicknames[threadID][userID];
                console.log(`[DEBUG] Removed nickname lock for ${userID} in thread ${threadID}`);
              }
              // ‡§®‡§ø‡§ï‡§®‡•á‡§Æ ‡§π‡§ü‡§æ‡§®‡§æ
              api.changeNickname('', threadID, userID, (err) => {
                if (err) {
                  console.error(`[ERROR] Failed to remove nickname for ${userID} in thread ${threadID}:`, err.message);
                } else {
                  console.log(`[DEBUG] Removed nickname for ${userID} in thread ${threadID}`);
                }
              });
              index += 1;
            }, 10000); // 10 ‡§∏‡•á‡§ï‡§Ç‡§° ‡§°‡§ø‡§≤‡•á ‡§™‡•ç‡§∞‡§§‡§ø ‡§Ø‡•Ç‡§ú‡§∞
          });
        });
      } else {
        // ‡§∏‡§ø‡§Ç‡§ó‡§≤ ‡§Ø‡•Ç‡§ú‡§∞ ‡§ï‡§æ ‡§®‡§ø‡§ï‡§®‡•á‡§Æ ‡§π‡§ü‡§æ‡§®‡§æ ‡§î‡§∞ ‡§Æ‡•ã‡§° ‡§è‡§ï‡•ç‡§ü‡§ø‡§µ ‡§ï‡§∞‡§®‡§æ
        let targetID = args[1]?.trim();
        if (event.mentions && Object.keys(event.mentions).length > 0) {
          targetID = Object.keys(event.mentions)[0];
        }

        if (!targetID || isNaN(targetID)) {
          api.sendMessage('‡§â‡§™‡§Ø‡•ã‡§ó: #removenickname @user ‡§Ø‡§æ #removenickname @everyone ‡§Ø‡§æ #removenickname stop', threadID);
          return;
        }

        if (targetID === botID) {
          api.sendMessage('‚ö†Ô∏è ‡§¨‡•â‡§ü ‡§ï‡§æ ‡§ñ‡•Å‡§¶ ‡§ï‡§æ ‡§®‡§ø‡§ï‡§®‡•á‡§Æ ‡§®‡§π‡•Ä‡§Ç ‡§π‡§ü‡§æ‡§Ø‡§æ ‡§ú‡§æ ‡§∏‡§ï‡§§‡§æ‡•§', threadID);
          return;
        }

        ensureThreadHasMessage(() => {
          api.getUserInfo(targetID, (err, ret) => {
            if (err || !ret?.[targetID]) {
              api.sendMessage('‚ùå ‡§Ø‡•Ç‡§ú‡§∞ ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§≤‡•á‡§®‡•á ‡§Æ‡•á‡§Ç ‡§Ö‡§∏‡§´‡§≤‡•§', threadID);
              console.error(`[ERROR] getUserInfo failed for ${targetID}:`, err?.message);
              return;
            }
            const name = ret[targetID].name || 'User';

            api.sendMessage(`üîß ${name} ‡§ï‡§æ ‡§®‡§ø‡§ï‡§®‡•á‡§Æ ‡§π‡§ü‡§æ‡§®‡§æ ‡§∂‡•Å‡§∞‡•Ç! ‡§®‡§Ø‡§æ ‡§®‡§ø‡§ï‡§®‡•á‡§Æ ‡§°‡§æ‡§≤‡§æ toh bot hata dega.`, threadID);

            // ‡§≤‡•â‡§ï ‡§π‡§ü‡§æ‡§®‡§æ (‡§Ö‡§ó‡§∞ ‡§π‡•à ‡§§‡•ã)
            if (botState.lockedNicknames[threadID]?.[targetID]) {
              delete botState.lockedNicknames[threadID][targetID];
              console.log(`[DEBUG] Removed nickname lock for ${targetID} in thread ${threadID}`);
            }

            // ‡§®‡§ø‡§ï‡§®‡•á‡§Æ ‡§π‡§ü‡§æ‡§®‡§æ
            api.changeNickname('', threadID, targetID, (err) => {
              if (err) {
                console.error(`[ERROR] Failed to remove nickname for ${targetID} in thread ${threadID}:`, err.message);
                api.sendMessage(`‚ùå ${name} ‡§ï‡§æ ‡§®‡§ø‡§ï‡§®‡•á‡§Æ ‡§π‡§ü‡§æ‡§®‡•á ‡§Æ‡•á‡§Ç ‡§Ö‡§∏‡§´‡§≤‡•§`, threadID);
                return;
              }
              if (!botState.removeNicknameTargets[threadID]) {
                botState.removeNicknameTargets[threadID] = new Set();
              }
              botState.removeNicknameTargets[threadID].add(targetID);
              botState.removeNicknameActive[threadID] = true; // ‡§Æ‡•ã‡§° ‡§è‡§ï‡•ç‡§ü‡§ø‡§µ
              api.sendMessage(`‚úÖ ${name} (${targetID}) ‡§ï‡§æ ‡§®‡§ø‡§ï‡§®‡•á‡§Æ ‡§π‡§ü‡§æ ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ! ‡§®‡§Ø‡§æ ‡§®‡§ø‡§ï‡§®‡•á‡§Æ ‡§°‡§æ‡§≤‡§æ toh bot hata dega (#removenickname stop ‡§∏‡•á ‡§¨‡§Ç‡§¶ ‡§π‡•ã‡§ó‡§æ).`, threadID);
              console.log(`[DEBUG] Removed nickname for ${targetID} in thread ${threadID}, mode active for user`);
            });
          });
        });
      }
    } catch (e) {
      console.error(`[ERROR] removenickname error for thread ${threadID}:`, e.message);
      api.sendMessage('‚ùå removenickname ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§Æ‡•á‡§Ç ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø‡•§', threadID);
    }
  }
};
