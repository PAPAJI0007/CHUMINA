module.exports = {
  name: "removenickname",
  execute(api, threadID, args, event, botState, isMaster) {
    const isAdmin = botState.adminList.includes(event.senderID) || isMaster;
    if (!isAdmin) {
      api.sendMessage('üö´ ‡§ï‡•á‡§µ‡§≤ ‡§Æ‡§æ‡§∏‡•ç‡§ü‡§∞ ‡§Ø‡§æ ‡§è‡§°‡§Æ‡§ø‡§® ‡§á‡§∏ ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§ï‡•ã ‡§Ø‡•Ç‡§ú ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§', threadID);
      return;
    }

    try {
      const botID = api.getCurrentUserID();

      if (args[1] === '@everyone') {
        // ‡§∏‡§≠‡•Ä ‡§Æ‡•á‡§Ç‡§¨‡§∞‡•ç‡§∏ ‡§ï‡•á ‡§®‡§ø‡§ï‡§®‡•á‡§Æ‡•ç‡§∏ ‡§π‡§ü‡§æ‡§®‡§æ
        api.getThreadInfo(threadID, (err, info) => {
          if (err || !info) {
            api.sendMessage('‚ùå ‡§•‡•ç‡§∞‡•á‡§° ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§≤‡•á‡§®‡•á ‡§Æ‡•á‡§Ç ‡§Ö‡§∏‡§´‡§≤‡•§', threadID);
            return;
          }

          const participantIDs = info.participantIDs.filter(id => id !== botID);
          let index = 0;
          const interval = setInterval(() => {
            if (index >= participantIDs.length) {
              clearInterval(interval);
              api.sendMessage('‚úÖ ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§ï‡•á ‡§∏‡§≠‡•Ä ‡§Æ‡•á‡§Ç‡§¨‡§∞‡•ç‡§∏ ‡§ï‡•á ‡§®‡§ø‡§ï‡§®‡•á‡§Æ‡•ç‡§∏ ‡§π‡§ü‡§æ ‡§¶‡§ø‡§è ‡§ó‡§è!', threadID);
              return;
            }

            const userID = participantIDs[index];
            // ‡§≤‡•â‡§ï ‡§π‡§ü‡§æ‡§®‡§æ (‡§Ö‡§ó‡§∞ ‡§π‡•à ‡§§‡•ã)
            if (botState.lockedNicknames[threadID]?.[userID]) {
              delete botState.lockedNicknames[threadID][userID];
            }
            // ‡§®‡§ø‡§ï‡§®‡•á‡§Æ ‡§π‡§ü‡§æ‡§®‡§æ
            api.changeNickname('', threadID, userID, (err) => {
              if (err) {
                console.error(`Failed to remove nickname for ${userID} in thread ${threadID}:`, err.message);
              }
            });
            index += 1;
          }, 10000); // 10 ‡§∏‡•á‡§ï‡§Ç‡§° ‡§°‡§ø‡§≤‡•á ‡§™‡•ç‡§∞‡§§‡§ø ‡§Ø‡•Ç‡§ú‡§∞
        });
      } else {
        // ‡§∏‡§ø‡§Ç‡§ó‡§≤ ‡§Ø‡•Ç‡§ú‡§∞ ‡§ï‡§æ ‡§®‡§ø‡§ï‡§®‡•á‡§Æ ‡§π‡§ü‡§æ‡§®‡§æ
        let targetID = args[1]?.trim();
        if (event.mentions && Object.keys(event.mentions).length > 0) {
          targetID = Object.keys(event.mentions)[0];
        }

        if (!targetID || isNaN(targetID)) {
          api.sendMessage('‡§â‡§™‡§Ø‡•ã‡§ó: #removenickname @user ‡§Ø‡§æ #removenickname @everyone', threadID);
          return;
        }

        if (targetID === botID) {
          api.sendMessage('‚ö†Ô∏è ‡§¨‡•â‡§ü ‡§ï‡§æ ‡§ñ‡•Å‡§¶ ‡§ï‡§æ ‡§®‡§ø‡§ï‡§®‡•á‡§Æ ‡§®‡§π‡•Ä‡§Ç ‡§π‡§ü‡§æ‡§Ø‡§æ ‡§ú‡§æ ‡§∏‡§ï‡§§‡§æ‡•§', threadID);
          return;
        }

        api.getUserInfo(targetID, (err, ret) => {
          if (err || !ret?.[targetID]) {
            api.sendMessage('‚ùå ‡§Ø‡•Ç‡§ú‡§∞ ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§≤‡•á‡§®‡•á ‡§Æ‡•á‡§Ç ‡§Ö‡§∏‡§´‡§≤‡•§', threadID);
            return;
          }
          const name = ret[targetID].name || 'User';

          // ‡§≤‡•â‡§ï ‡§π‡§ü‡§æ‡§®‡§æ (‡§Ö‡§ó‡§∞ ‡§π‡•à ‡§§‡•ã)
          if (botState.lockedNicknames[threadID]?.[targetID]) {
            delete botState.lockedNicknames[threadID][targetID];
          }

          // ‡§®‡§ø‡§ï‡§®‡•á‡§Æ ‡§π‡§ü‡§æ‡§®‡§æ
          api.changeNickname('', threadID, targetID, (err) => {
            if (err) {
              console.error(`Failed to remove nickname for ${targetID} in thread ${threadID}:`, err.message);
              api.sendMessage(`‚ùå ${name} ‡§ï‡§æ ‡§®‡§ø‡§ï‡§®‡•á‡§Æ ‡§π‡§ü‡§æ‡§®‡•á ‡§Æ‡•á‡§Ç ‡§Ö‡§∏‡§´‡§≤‡•§`, threadID);
              return;
            }
            api.sendMessage(`‚úÖ ${name} (${targetID}) ‡§ï‡§æ ‡§®‡§ø‡§ï‡§®‡•á‡§Æ ‡§π‡§ü‡§æ ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ!`, threadID);
          });
        });
      }
    } catch (e) {
      console.error(`Removenickname error for thread ${threadID}:`, e.message);
      api.sendMessage('‚ùå removenickname ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§Æ‡•á‡§Ç ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø‡•§', threadID);
    }
  }
};
